import{o as p,c as o,a as l}from"./index-44ad88d2.js";const s="/blog/assets/hw2-a77c37d0.png",n={class:"markdown-body"},h="2025-06-29T00:00:00.000Z",_="2025-06-29T00:00:00.000Z",c="hw",u="高级算法作业2",g={__name:"高级算法 hw2",setup(r,{expose:i}){return i({frontmatter:{date:"2025-06-29T00:00:00.000Z",updated:"2025-06-29T00:00:00.000Z",category:"hw",summary:"高级算法作业2"}}),(a,t)=>(p(),o("div",n,t[0]||(t[0]=[l('<h1>hw2</h1><h2>0</h2><p><img src="'+s+'" alt="hw2"></p><h2>1</h2><p>Simple Tabulation Hashing 将密钥视为由 $c$ 个字符组成的向量 $(x_1, x_2, \\dots, x_c)$，为每一位建立一个查找表 $T_i$，定义哈希函数为：</p><p>$h(x)=T1[x1]⊕T2[x2]⊕⋯⊕Tc[xc]h(x) = T_1[x_1] \\oplus T_2[x_2] \\oplus \\cdots \\oplus T_c[x_c]$</p><p>此方法源于 Zobrist（1970）与 Wegman–Carter（1981）。其主要优点包括：</p><ul><li><strong>实现简洁、速度快</strong>：查表+异或操作极其高效，可充分利用高速缓存，速度接近单次乘法。</li><li><strong>较强的随机性</strong>：虽然理论上仅为 3-独立哈希，但在实践中表现良好，如线性探测哈希中保证常数期望查询时间，在 Cuckoo 哈希中实现接近最优失败概率。</li><li><strong>节省空间</strong>：若密钥空间为 $u$，使用 $O(cu^{1/c})$ 空间可实现高质量哈希。</li></ul><p><strong>扩展形式</strong>：</p><ul><li><strong>扭曲制表哈希（Twisted Tabulation）</strong>：对其中一位进行额外扰动，改进尾部界与 Chernoff 集中性。</li><li><strong>二重制表哈希（Double Tabulation）</strong>：串联两层哈希，提升近似完全随机性。</li></ul><p>该方法结合理论保证与实践效率，是现代哈希方法中的优选。</p><hr><h2>2</h2><p>Johnson–Lindenstrauss（JL）引理指出，在欧几里得空间中，$n$ 个点可嵌入到 $k=O(\\log n/\\varepsilon^2)$ 维，使点对距离近似保持 $(1\\pm\\varepsilon)$ 倍数。这为高维数据的降维提供了理论支持。</p><p>然而，在 $\\ell_\\infty$（最大坐标差）范数下，不存在类似有效的降维方法。原因在于：$\\ell_\\infty$ 是一种“通用度量空间”，所有有限度量空间均可嵌入其中。若 $\\ell_\\infty$ 可被低维逼近，则意味着所有度量空间都可有效降维，这与理论相悖。因此，对于 $\\ell_\\infty$，只能使用高维嵌入维持距离精度，无法享受 JL 的低维优势。</p><hr><h2>3</h2><h3>Hamming 空间中的 LSH</h3><p>LSH 在 Hamming 空间中常用的方式是选取一个随机坐标：$h(x) = x_i$，使得：</p><p>Pr[h(x)=h(y)]=1−DH(x,y)dPr[h(x) = h(y)] = 1 - \\frac{D_H(x, y)}{d}</p><p>该方式结构简单，但敏感性差异较小。为显著区分半径 $r$ 内/外的点，通常需要多个哈希函数的组合（如 AND/OR 放大），导致效率下降。</p><h3>针对随机集合分布的优化</h3><p>若数据点为集合特征（如 0-1 向量），可使用更匹配的度量与哈希方法：</p><ul><li><strong>Jaccard 相似度 + MinHash</strong>：碰撞概率即集合交并比，适用于集合近似。</li><li><strong>余弦相似度 + SimHash</strong>（随机超平面法）：$Pr[h(x) = h(y)] = 1 - \\frac{\\theta(x, y)}{\\pi}$，其中 $\\theta$ 为夹角。适合二值向量或高维稀疏文本。</li></ul><p>这种“度量匹配 + LSH 优选”方式，显著提升了检索精度与效率。</p><hr><h2>4</h2><p>Oblivious Subspace Embedding（OSE）旨在将任意 $d$ 维子空间 $\\Pi$ 映射到低维空间，同时近似保留所有向量的 $\\ell_2$ 范数。</p><p>常用构造为稀疏矩阵 $S \\in \\mathbb{R}^{m \\times d}$：</p><ul><li>随机选择映射桶 $h(j) \\in {1, …, m}$</li><li>选择符号 $\\sigma(j) = \\pm 1$</li><li>设置 $S_{h(j), j} = \\sigma(j)$，其余为 0</li></ul><p>对于任意向量 $x$，有：</p><p>(1−ε)∥x∥2≤∥Sx∥2≤(1+ε)∥x∥2(1 - \\varepsilon)|x|_2 \\leq |Sx|_2 \\leq (1 + \\varepsilon)|x|_2</p><p>当 $m = O(d^2/\\varepsilon^2)$ 时，上述保证以高概率成立。该技术在稀疏数据降维、线性回归等场景中应用广泛。</p><hr><h2>5</h2><p><strong>将节点容量最小割转化为边容量模型</strong>：</p><p>设每个节点 $i$ 有容量 $c_i$，将其拆为 $i_{\\text{in}}, i_{\\text{out}}$，加边 $(i_{\\text{in}} \\to i_{\\text{out}})$，容量为 $c_i$。所有入边接 $i_{\\text{in}}$，出边改接 $i_{\\text{out}}$。</p><p>若切断该中间边，则等价于移除原图中所有连接该点的边，从而控制其流通能力。该方式常用于将节点容量问题转为标准最小割问题。</p><hr><h2>6</h2><p>某些调度问题可建模为线性规划，其约束矩阵为<strong>全积分矩阵（Totally Unimodular）</strong>，如：</p><ul><li>作业指派到机器的调度</li><li>资源分配问题</li></ul><p>在此类模型中，由于可行域对应的多面体极点为整数点，LP 最优解自动为整数解，无需额外整数规划算法。</p><p>但若调度模型包含非二分结构、顺序或复杂依赖等约束，则整数性不再自动保证，此时需引入整数规划、割平面等技术。</p><hr><h2>7</h2><p><strong>König 定理</strong>指出：在任意二分图中，最大匹配数 = 最小顶点覆盖数。该结论源于线性规划对偶性，也可用网络流模型证明。</p><p>该等价性带来实际算法优势：</p><ul><li>使用 Hopcroft–Karp 算法在 $O(E\\sqrt{V})$ 时间内找到最大匹配；</li><li>再用可达标记法构造最小顶点覆盖。</li></ul><p>因此，二分图的最小顶点覆盖可在多项式时间内高效求解。</p>',50)])))}};export{c as category,h as date,g as default,u as summary,_ as updated};
