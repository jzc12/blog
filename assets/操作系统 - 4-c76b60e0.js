import{o as p,c as a,a as l}from"./index-04839b4c.js";const b="/blog/assets/58cf4d50c61c4b3b87e1c9227dd4b941-9c0818a6.webp",t="/blog/assets/a49dd62a8d0541c996d136c2ddbd49b1-258377df.webp",c="/blog/assets/61e97c38cadf4d42ac9bc6de2ff632f2-539488fc.webp",o="/blog/assets/78cf9c2493b348f9a4752755ec2a8b01-3c865a7c.webp",i="/blog/assets/fb5e6be1a1a24729bdf9425b24991b9b-8de8ed4e.webp",d="/blog/assets/db173395b6234f9086a840f8017b682b-48948e44.webp",f="/blog/assets/0a697e5019e84ce7b2ebbe43f53c6a88-4b1e519a.webp",r="/blog/assets/e548c1b80b2d4da1b765284796c653a4-f0aa2324.webp",m="/blog/assets/9331a7c3b75b42709695505abe6c54e7-28a5d07b.webp",_="/blog/assets/fc4f2691ed59433a8ed90add237b0a2a-231322cc.webp",g="/blog/assets/6b824bcf78e3462b81713930087ee024-f27b707a.webp",n="/blog/assets/e8329f9e33c7429dab7a5d4d7135deb9-83dc8cdf.webp",w="/blog/assets/0d6ac6fede1247fb9fdcace3fd80ef61-452f35ea.webp",h="/blog/assets/64a8d73956744bcea8900322c20cbd3b-3ff5ee40.webp",u="/blog/assets/810a0b758a9340b8b6852bb3287f1ed8-aa50aa1c.webp",k="/blog/assets/ad238ccfde834c1497c85a3b95156d4d-6088ca34.webp",q="/blog/assets/da2f046cd088472f963c8754fb92c0d3-140a387e.webp",y="/blog/assets/c1555320ffdf4506918f29993ade9b4e-d4a1939d.webp",F="/blog/assets/62c1466a628c4f23a5cdf77a5a0124ff-a6ab1fb8.webp",O="/blog/assets/091da71b8db4489a891e6e100c5b025c-73ed4012.webp",S="/blog/assets/f149ff6b5dfb4488a90ecc602fafad92-185e4aed.webp",T="/blog/assets/4c77dfdf41a94a3184caa0972ac1daf9-1c3428ac.webp",N="/blog/assets/e6a5b41461804dc59617dade8f09f414-fbd71790.webp",V="/blog/assets/c0c97324baaa41189ac6a562af221120-41b643bb.webp",x="/blog/assets/3fde875d66044b728370dd7e82bb9c34-a9f74a1b.webp",Z="/blog/assets/c4e985fecf23457e9a4c781b95a8a32f-66652a39.webp",B="/blog/assets/c23dd4facaa6413487b985f25d1b306b-90428f4d.webp",A="/blog/assets/47f572daa465437fa5ee004f07679c47-20441a7e.webp",v="/blog/assets/2679d26da7ff4bf0ad844e1cfed4f941-002d2f39.webp",C="/blog/assets/0c511217604c4409b966457417bd5fc2-6b83dbdd.webp",D="/blog/assets/660ac0e69d70462a939e0e9a176dff41-c23e8252.webp",E="/blog/assets/5f8fb06e44d54a4bbe599c318bbbdd3e-b335f923.webp",I="/blog/assets/822bbd46fa074414a57a2e10c58b39e0-f6279e44.webp",L="/blog/assets/3e2ab21e55e1409b92d6f99a5dcf95a0-a3eacd03.webp",P="/blog/assets/3b3b37773be5418980e921850517fa9f-17259de0.webp",U="/blog/assets/f3953e8c14f04ec7a291368926fb2eb5-88e2577d.webp",W="/blog/assets/7f40b902c02848348c4c677e1dce1ca8-4f756bc7.webp",X="/blog/assets/397d514be7a94f90982639e1e6881f28-5c56d679.webp",j="/blog/assets/598a184514b944db9700848d47aab2f2-a578dee5.webp",z="/blog/assets/e710eb38d800416580c1ce20d1a46577-9447e954.webp",G="/blog/assets/141f2787023342bdbea729429acd92b8-a4aeacfb.webp",H="/blog/assets/37e770bba9974697b67b72539148ef48-68d7824a.webp",J="/blog/assets/2f553af79c6748a68055ee362d4b0849-50922b25.webp",K="/blog/assets/e6ada724ac70459f9b3b9ba80f5f40f6-d1ebb169.webp",M="/blog/assets/9220d26e82064cf682d50e5e12f4b59b-6fb25306.webp",Q="/blog/assets/78d14eb883e24dbb9cfac2eedca82218-59bf1471.webp",R="/blog/assets/9381c7f5b383448cb40d9df24740660c-e2feb647.webp",Y="/blog/assets/833f353df78c42609280080edf262f4a-9c1e7361.webp",$="/blog/assets/7fb8b3e42eef4b579e9df11605d57d7b-fb4a4ead.webp",ss="/blog/assets/d9a13e40f108450cb5503544443143a3-2dd2ad09.webp",es="/blog/assets/98431294942b45038b8b694e6e211a07-4ec14177.webp",ps="/blog/assets/9057949775644488883a3ca32e3c0d42-e578f687.webp",as="/blog/assets/467b87f564b84bf9bd5f25b03fe5f477-95bbca8a.webp",ls="/blog/assets/4ff12037ce6d4cf4aad1271b6182f4e9-4303ea1b.webp",bs="/blog/assets/3d6498dfd0544377b1f749dcd5ecfd45-adc1caae.webp",ts="/blog/assets/6219640526dd4bd4a9f162e54c15b455-8accedec.webp",cs="/blog/assets/34238442c89244ada386247b65850cf8-f8039aec.webp",os="/blog/assets/76691ace96ea4d5aa10512c52f29f1cb-c8e546a1.webp",is="/blog/assets/e315b87136c044dbaf7f6f7ce53a691b-4ae28077.webp",ds="/blog/assets/e0c6b36b35974e3c9a8d9f1739c4bff0-d6919dc7.webp",fs="/blog/assets/988759177bd84837b354de0c14c67c5c-b883da21.webp",rs="/blog/assets/e939fd5e9c604f499f185a85bbcd912a-3a421858.webp",ms="/blog/assets/91487ea9e1eb4f87a0df0bf27d1a62c8-bf18a9e7.webp",_s={class:"markdown-body"},us="2025-07-01T00:00:00.000Z",ks="2025-07-30T00:00:00.000Z",qs="考研复习",ys="操作系统",Fs={__name:"操作系统 - 4",setup(gs,{expose:e}){return e({frontmatter:{date:"2025-07-01T00:00:00.000Z",updated:"2025-07-30T00:00:00.000Z",category:"考研复习",summary:"操作系统"}}),(ws,s)=>(p(),a("div",_s,s[0]||(s[0]=[l('<h2>文件管理</h2><h3>4.1 文件系统基础</h3><p><img src="'+b+'" alt=""></p><h4>4.1.1 文件的基本概念</h4><p><img src="'+t+'" alt=""></p><p>一个文件有哪些属性 ？</p><blockquote><ul><li>文件名 ：由创建文件的用户决定文件名 ，主要是为了方使用户找到文件 ，同一目录下不允许有重名文件。</li><li>标识符 ：一个系统内的各文件标识符唯一 ，对用户来说毫无可读性因此标识符只是操作系统用于区分各个文件的一种内部名称。</li><li>类型 ：指明文件的类型</li><li>位置 ：文件存放的路径 （让用户使用 ）、在外存中的地址 （操作系统使用 ，对用户不可见 ）</li><li>大小 ：指明文件大小创建时间、上次修改时间、文件所有者信息</li><li>保护信息 ：对文件进行保护的访问控制信息</li></ul></blockquote><p><img src="'+c+'" alt=""> <img src="'+o+'" alt=""> <img src="'+i+'" alt=""> <img src="'+d+'" alt=""></p><h4>4.1.2 文件控制块和索引节点</h4><ul><li><p>文件控制块</p><p><img src="'+f+'" alt=""></p></li><li><p>索引节点</p><p><img src="'+r+'" alt=""></p></li></ul><h4>4.1.3 文件的操作</h4><p><img src="'+m+'" alt=""> <img src="'+_+'" alt=""></p><p><img src="'+g+'" alt=""></p><p>注 ：</p><ul><li>打开文件表有两种 （系统及级进程自己的 ）</li><li>只要完成了文件打开open()系统调用 ，后面再使用别的文件操作的系统调用 ，就不再使用文件名 ，而使用文件描述符。</li></ul><ol><li><p>创建文件 （分配空间 ，创建目录项 ）</p><p><img src="'+n+'" alt=""></p></li><li><p>删除文件 （找目录 ，删除目录项 and PCB ，回收空间 （磁盘空间和内存缓9冲区 ）</p><p><img src="'+w+'" alt=""></p></li><li><p>读文件 （读指针 ）</p><p><img src="'+h+'" alt=""></p></li><li><p>写文件 （写指针 ）</p><p><img src="'+u+'" alt=""></p></li><li><p>打开文件</p><p><img src="'+k+'" alt=""> <img src="'+q+'" alt=""></p></li><li><p>关闭文件</p><p><img src="'+y+'" alt=""></p></li></ol><h4>4.1.4 文件保护</h4><p><img src="'+F+'" alt=""></p><h4>4.1.5 文件的逻辑结构</h4><p>从用户角度看到的文件的全貌。</p><p><img src="'+O+'" alt=""></p><ol><li><p>无结构文件</p><p><img src="'+S+'" alt=""></p></li><li><p>有结构文件 （定长记录、变长记录 ） <img src="'+T+'" alt=""></p><ol><li><p>顺序文件</p><p><img src="'+N+'" alt=""><br> 注 ：链式存储 （串存储 ）</p></li><li><p>索引文件</p><p><img src="'+V+'" alt=""></p></li><li><p>索引顺序文件</p><p><img src="'+x+'" alt=""> <img src="'+Z+'" alt=""> <img src="'+B+'" alt=""></p></li></ol></li></ol><p>注 ：索引文件和索引顺序文件都提高了查找速度 ，但都因配置索引表而增加了存储空间。</p><h4>4.1.6 文件的物理结构</h4><p>文件在存储器上的组织结构 （从OS的角度看到的文件的全貌 ）。</p><p><img src="'+A+'" alt=""></p><p><img src="'+v+'" alt=""></p><ol><li><p>连续分配</p><p><img src="'+C+'" alt=""><br> 注 ：缺点 ：会产生碎片 （外部 ）且不方便扩展。</p></li><li><p>链接分配 <img src="'+D+'" alt=""></p><ol><li><p>显式链接 ： FAT在整个磁盘中只有一张 ，常驻内存、开机读入内存。（盘块号可隐含 ）</p><ol><li>优点 ：支持顺序访问、直接访问 ，检索速度快。</li><li>缺点 ：FAT需要占用一定的内存空间。</li></ol></li><li><p>隐式链接 （Default ）</p><p><img src="'+E+'" alt=""></p></li></ol></li><li><p>索引分配</p><p><img src="'+I+'" alt=""> <img src="'+L+'" alt=""></p><ol><li><p>链接方案 （单级索引分配方式 ）</p><p><img src="'+P+'" alt=""></p></li><li><p>多级索引分配方式</p><p><img src="'+U+'" alt=""></p></li><li><p>混合索引分配方式</p><p><img src="'+W+'" alt=""></p></li></ol></li></ol><h4>4.1.7 本节小结</h4><p>1 ）什么是文件 ？</p><blockquote><p>文件是以计算机硬盘为载体的存储在计算机上的信息集合 ，它的形式多样。</p></blockquote><p>2 ）单个文件的逻辑结构和物理结构之间是否存在某些制约关系 ？</p><blockquote><p>文件的逻辑结构是用户可见的结构 ，即从用户角度看到的文件的全貌。文件的物理结构是文件在存储器上的组织结构。它和文件的存取方法以及存储设备的特性等都有着密切的联系。单个文件的逻辑结构和物理结构之间虽无明显的制约或关联关系 ，但是如果物理结构选择不慎 ，也很难体现出逻辑结构的特点 ，比如一个逻辑结构是顺序结构 ，而物理结构是隐式链接结构的文件 ，即使理论上可以很快找出某条记录的地址 ，而实际仍需在磁盘上一块一块地找。<br> 学到这里时 ，读者应能有这样的体会 ：现代操作系统的思想中 ，处处能见到面向对象程序设计的影子。本节我们学习的一个新概念一—文件 ，实质上就是一个抽象数据类型 ，也就是一种数据结构 ，若读者在复习操作系统之前已复习完数据结构 ，则遇到一种新的数据结构时 ，一定会有这样的意识 ：要认识它的逻辑结构、物理结构 ，以及对这种数据结构的操作。</p></blockquote><h3>4.2 目录</h3><p><img src="'+X+'" alt=""></p><h4>4.2.1 目录的基本概念</h4><p><img src="'+j+'" alt=""> <img src="'+z+'" alt=""></p><h4>4.2.2 目录结构</h4><ol><li><p>单级目录结构</p><p><img src="'+G+'" alt=""> 单级目录结构实现了“按名存取”，但是存在查找速度慢、文件不允许重名、不便于文件共享等缺点 ，而且对于多用户的操作系统显然是不适用的。</p></li><li><p>两级目录结构</p><p><img src="'+H+'" alt=""><br> 两级目录结构提高了检索的速度 ，解决了多用户之间的文件重名问题 ，文件系统可以在目录上实现访问限制。但是两级目录结构缺乏灵活性 ，不能对文件分类。</p></li><li><p>树形目录结构</p><p><img src="'+J+'" alt=""> 树形目录结构可以很方便地对文件进行分类 ，层次结构清晰 ，也能够更有效地进行文件的管理和保护。在树形目录中 ，不同性质、不同用户的文件 ，可以分别呈现在系统目录树的不同层次或不同子树中 ，很容易地赋予不同的存取权限。但是 ，在树形目录中查找一个文件 ，需要按路径名逐级访问中间节点 ，增加了磁盘访问次数 ，这无疑会影响查询速度。 目前 ，大多数操作系统如UNIX、Linux和Windows系统都采用了树形文件目录。</p></li><li><p>无环图目录结构</p><p><img src="'+K+'" alt=""></p></li></ol><h4>4.2.3 目录的操作</h4><ul><li>搜索 ：当用户使用一个文件时 ，需要搜索目录 ，以找到该文件的对应目录项。</li><li>创建文件 ：当创建一个新文件时 ，需要在目录中增加一个目录项。</li><li>删除文件 ：当删除一个文件时 ，需要在目录中删除相应的目录项</li><li>创建目录 ：在树形目录结构中 ，用户可创建白己的用户文件目录 ，并可再创建子目录删除目录。有两种方式 ： <ul><li>不删除非空目录 ，删除时要先删除目录中的所有文件 ，并递归地删除子目录。</li><li>可删除非空目录 ，目录中的文件和子目录同时被删除。</li></ul></li><li>移动目录 ：将文件或子目录在不同的父目录之间移动 ，文件的路径名也会随之改变。</li><li>显示目录 ：用户可以请求显示目录的内容 ，如显示该用户目录中的所有文件及属性。</li><li>修改目录 ：某些文件属性保存在目录中 ，因而这些属性的变化需要改变相应的目录项。</li></ul><h4>4.2.4 目录实现</h4><h4>4.2.5 文件共享</h4><p><img src="'+M+'" alt=""></p><ol><li><p>基于索引节点的共享方式 （硬链接 ）</p><p><img src="'+Q+'" alt=""></p></li><li><p>利用符号实现文件共享 （软链接 ）</p><p><img src="'+R+'" alt=""></p></li></ol><h4>4.2.6 本节小结</h4><p>1 ）目录管理的要求是什么 ？</p><blockquote><ol><li>实现“按名存取”，这是目录管理最基本的功能。</li><li>提高对目录的检索速度 ，从而提高对文件的存取速度。</li><li>为了方便用户共享文件 ，目录还需要提供用于控制访问文件的信息。</li><li>允许不同用户对不同文件采用相同的名字 ，以使用户按自己的习惯给文件命名。</li></ol></blockquote><p>2 ）在目录中查找某个文件可以使用什么方法 ？</p><blockquote><p>可以采用线性列表法或哈希表法。线性列表将文件名组织成一个线性表 ，查找时依次与线性表中的每个表项进行比较。</p><ul><li>若将文件名按序排列 ，则使用折半查找法可以降低平均的查找时间但建立新文件时会增加维护线性表的开销。</li><li>哈希表用文件名通过哈希函数得到一个指向文件的指针 ，这种方法非常迅速 ，但要注意避免冲突。</li></ul></blockquote><h3>4.3 文件系统</h3><p><img src="'+Y+'" alt=""></p><p><img src="'+$+'" alt=""> <img src="'+ss+'" alt=""> <img src="'+es+'" alt=""></p><h5>磁盘空闲空间管理的方法</h5><ol><li><p>空闲表法</p><p><img src="'+ps+'" alt=""></p></li><li><p>空闲链表法</p><ol><li><p>空闲盘块链</p><p><img src="'+as+'" alt=""> <img src="'+ls+'" alt=""></p></li><li><p>空闲盘区链</p><p><img src="'+bs+'" alt=""></p></li></ol></li><li><p>位示图法</p><p><img src="'+ts+'" alt=""> <img src="'+cs+'" alt=""></p></li><li><p>成组链接法</p><p><img src="'+os+'" alt=""> <img src="'+is+'" alt=""> <img src="'+ds+'" alt=""> <img src="'+fs+'" alt=""> <img src="'+rs+'" alt=""></p></li></ol><p>虚拟文件系统VFS所定义的对象类型</p><blockquote><p>（1 ）超级块对象 ：表示一个已安装 （或称挂载 ）的特定文件系统。超级块对象对应于磁盘上特定扇区的文件系统超级块 ，用于存储已安装文件系统的元信息。其操作方法包含一系列可在超级块对象上调用的操作函数 ，主要有分配inode、销毁inode、读inode、写inode等。 （2 ）索引节点对象 ：表示一个特定的文件。索引节点和文件是一对一的关系。只有当文件被访问时 ，才在内存中创建索引节点对象 ，每个索引节点对象都会复制磁盘索引节点包含的一些数据。索引节点对象还提供许多操作函数 ，如创建新索引节点、创建硬链接、创建新目录等。 （3 ）目录项对象 ：表示一个特定的目录项。目录项对象是一个路径的组成部分 ，它包含指向关联索引节点的指针 ，还包含指向父目录和指向子目录的指针。不同于前面两个对象 ，目录项对象在磁盘上没有对应的数据结构 ，而是VFS在遍历路径的过程中 ，将它们逐个解析成目录项对象的。</p><p>（4 ）文件对象 ：表示一个与进程相关的已打开文件。可以通过调用openO打开一个文件 ，通过调用closeO关闭一个文件。文件对象和物理文件的关系类似于进程和程序的关系。文件对象仅是进程视角上代表已打开的文件 ，它反过来指向其索引节点。文件对象包含与该文件相关联的目录项对象 ，包含该文件的文件系统、文件指针等 ，还包含在该文件对象上的一系列操作函数。当进程发起一个面向文件的系统调用时 ，内核调用VFS中的一个函数 ，该函数调用目标文件系统中的相应函数 ，将文件系统请求转换到面向设备的指令。以在用户空间调用writeO为例 ，它在VFS中通过sys_writeO函数处理 ，sys_writeO找到具体文件系统提供的写方法 ，将控制权交给该文件系统 ，最后由该文件系统与物理介质交互并写入数据 ，如图所示。</p></blockquote><h3>4.4 本章疑难点</h3><h4>1、文件的物理分配方式的比较</h4><p><img src="'+ms+'" alt=""></p><h4>2、文件打开的过程描述</h4><blockquote><ol><li>检索目录 ，要求打开的文件应该是已经创建的文件 ，它应登记在文件目录中 ，否则会出错。在检索到指定文件后 ，就将其磁盘iNode复制到活动iNode表中。</li><li>将参数mode所给出的打开方式与活动iNode中在创建文件时所记录的文件访问权限相比较 ，如果合法 ，则此次打开操作成功。</li><li>当打开合法时 ，为文件分配用户打开文件表表项和系统打开文件表表项 ，并为后者设置初值 ，通过指针建立表项与活动iode之间的联系 ，再将文件描述符f返回给调用者。</li></ol></blockquote>',62)])))}};export{qs as category,us as date,Fs as default,ys as summary,ks as updated};
