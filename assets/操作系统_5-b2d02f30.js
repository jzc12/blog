import{o as a,c as t,a as e}from"./index-4d0d4072.js";const p="/blog/assets/fb268548c7454e99831df995b09de3b8-983a979e.webp",o="/blog/assets/19dc5c196e3e418ab8268fb16d7d997f-71e44c1f.webp",l="/blog/assets/72bff6e2ad1349869fe25538bc17fe34-bb7ff7ac.webp",i="/blog/assets/c9eb158470dc4e3f937f5411bbd0c3c2-df3c4998.webp",f="/blog/assets/9bf6c5d206a848348f7d2df918b5711d-0e18210c.webp",d="/blog/assets/54a6222a872d4947b060760b85243250-27105791.webp",r="/blog/assets/31135a27a2c346aca084d60a86cca0c7-a6ed15fc.webp",m="/blog/assets/b3dee9742ef84c3fb3a30868daa0f715-1fd0f3bf.webp",_="/blog/assets/263a935a50204f858737464759d00b69-4106a13e.webp",g="/blog/assets/c024be2f3bbd49588880ebf5542a2b86-71a0e4df.webp",n="/blog/assets/22ec4bbfb51c4cf2972a55e11506867b-3245bb54.webp",b="/blog/assets/DMA-d470afcc.png",w="/blog/assets/842fa52206c8403d9ffd3aa06bd748e9-a914af78.webp",h="/blog/assets/通道-ca69e848.png",u="/blog/assets/6755c70046ef4cc3b3410f6f5c730a0e-3b5c8617.webp",O="/blog/assets/4d96a3be1f9b4599b296c8c3ca07cbef-3fcd160b.webp",I="/blog/assets/f8f60ba7d29442688988dd5493e64038-357194d4.webp",k="/blog/assets/011fc5b4380942c799f50dd24c9686a8-d1bd5c6b.webp",q="/blog/assets/fc46524a392b411c81b5706c1a4f57bb-a46f3de7.webp",T="/blog/assets/6951769722d443cb86f8d6ef641db957-9ee1d3b3.webp",C="/blog/assets/588ce956d6274640a7f866cc8ec1a601-cb3798e0.webp",D="/blog/assets/a6a3c17c581f462f85195a7462b68b10-a6525dec.webp",P="/blog/assets/61bda631acda4b7b80db5073b37b1431-b9be203b.webp",S="/blog/assets/7abaf5030af4487980331c36d695e5ea-7b329738.webp",y="/blog/assets/8cddb44f598b40d38c531ac40e8f974b-26d7d236.webp",A="/blog/assets/25c709abb1cf4653a1fe09a03802b0bb-b5275eae.webp",B="/blog/assets/3647b19e69014f5398464e5a1b4f91d3-f397276a.webp",M="/blog/assets/7fae3d40332147fd92a1413d6b24c341-ddb6a0ef.webp",Z="/blog/assets/374fb2a81a38402eaa89eeb08a9ea279-c85ca2a8.webp",x="/blog/assets/d285f4a5572544f28ea667f7f52efd18-cd1673df.webp",L="/blog/assets/20a4cfdd9feb4b20aad2c3948bd2de8e-dc42b4c0.webp",U="/blog/assets/ccb2dda496b448d6b9a9e4cbf3039177-bba553b9.webp",v="/blog/assets/47f1c21ee3514b86b040b559cdce0233-c08a416c.webp",E="/blog/assets/1c1c0e1a71534ba7bb26fe670fd8be7e-3c31a6ed.webp",H="/blog/assets/fb43234ad6b5478cbf540f702a37e47d-e6c91852.webp",N="/blog/assets/64f4658c87124ea19337605b42c1c38a-ece97fbd.webp",V="/blog/assets/ad62c94a73a747e4aebecc5bbe7bcf42-a31c6523.webp",j="/blog/assets/3677a5edba2c4a65acced3ffca334005-be01f2c6.webp",z="/blog/assets/443fe620430d4a21a310e82292eb2052-65215708.webp",F="/blog/assets/d25fbaa4e43a4aa9807a7fd2e6f176fd-c52fca9c.webp",G="/blog/assets/cfe77d3726ac44efb98df0562cb0315b-943f0f09.webp",J="/blog/assets/75e52b2cc6c74884a860326dd9a2eb90-709047b5.webp",K="/blog/assets/3f532b0dac754bd8a37aa79c91b04798-c2bd5dbf.webp",Q="/blog/assets/d4df1fdaf99b49cc939f6aad4fef9cbf-9c763bb9.webp",R="/blog/assets/63f9193c708641f084e5c04e5ac9b001-43ebdafa.webp",W="/blog/assets/3fdfb0a9412f410ea06997a362b5353b-72735401.webp",X="/blog/assets/a08d4474a31c480cb69c89a6d47592ac-13d1ee75.webp",Y="/blog/assets/d383abbd8d0148b397d5059cd9b9d6ab-9fc14394.webp",$="/blog/assets/682b9b6766c34805863014cfd83f0882-4464b35e.webp",ss="/blog/assets/4106c0a92f954a91b0d8d3de7e9552c6-048082d1.webp",bs="/blog/assets/9f14201325e14886bd5c147c4e9fd0ec-5e8820e3.webp",cs="/blog/assets/4d28ecdbe0dc4fdc9fe1f6aa61d7cae8-3a8ff9b0.webp",as="/blog/assets/5bfc6d15dbfd4418aa1f976eca7b8b67-dca3b7a7.webp",ts="/blog/assets/33dc1f63d25f4c269384a12682d63291-bd27a139.webp",es="/blog/assets/45bd8cb54200413285e80fa4ffc9fa21-4ec93b23.webp",ps="/blog/assets/016f6546699b47b6b38e890571460c75-3ed33868.webp",os="/blog/assets/d165bd5488094659989addcdffd80cbe-cadde897.webp",ls="/blog/assets/cdf5378ee21344419a55bc3bf08fdfa3-dd0037f4.webp",is="/blog/assets/9d0f62ae8cf24dfba9c0b287c3376f73-fc38e141.webp",fs="/blog/assets/2a79ee8e4a554b7489a8fdde25db0e75-be58c78a.webp",ds="/blog/assets/c1c25a15be844d1894bbdb6c841c1bf3-fd1e396d.webp",rs={class:"markdown-body"},ws="2025-07-01T00:00:00.000Z",hs="2025-07-30T00:00:00.000Z",us="考研复习",Os="操作系统",Is={__name:"操作系统_5",setup(ms,{expose:c}){return c({frontmatter:{date:"2025-07-01T00:00:00.000Z",updated:"2025-07-30T00:00:00.000Z",category:"考研复习",summary:"操作系统"}}),(gs,s)=>(a(),t("div",rs,s[0]||(s[0]=[e('<h2>IO 管理</h2><h3>5.1 I/O管理概述</h3><h4>5.1.1 I/O设备</h4><p><img src="'+p+'" alt=""></p><p>注 ：稍微注意一下块设备是可以寻址的 ，但是字符设备是不可寻址的。</p><p><img src="'+o+'" alt=""></p><ul><li><p>I/O接口 （又称为设备控制器 ）</p><p><img src="'+l+'" alt=""> <img src="'+i+'" alt=""> <img src="'+f+'" alt=""> <img src="'+d+'" alt=""></p></li></ul><h4>5.1.2 I/O控制方式</h4><p><img src="'+r+'" alt=""></p><ul><li><p>程序直接控制方式</p><p><img src="'+m+'" alt=""> <img src="'+_+'" alt=""></p></li><li><p>中断驱动方式</p><p><img src="'+g+'" alt=""></p></li><li><p>DMA方式</p><p><img src="'+n+'" alt=""></p><p><img src="'+b+'" alt="DMA"></p><p><img src="'+b+'" alt="DMA"></p></li><li><p>*通道控制方式</p><p><img src="'+w+'" alt=""></p><p><img src="'+h+'" alt="通道"></p></li></ul><h4>5.1.3 I/O软件层次结构</h4><p><img src="'+u+'" alt=""></p><ul><li><p>用户层软件 （产生I/O请求 ；格式化I/O ；SPOOLing ）</p><p><img src="'+O+'" alt=""></p></li><li><p>设备独立性软件 （映射 ；保护 ；分块 ；缓冲 ；分配 ）</p><p><img src="'+I+'" alt=""></p></li><li><p>设备驱动程序 （设置设备寄存器 ；检查状态 ）</p><p><img src="'+k+'" alt=""></p></li><li><p>中断处理程序</p><p><img src="'+q+'" alt=""></p></li></ul><h4>5.1.4 应用程序I/O接口</h4><p><img src="'+T+'" alt=""></p><p><img src="'+C+'" alt=""> <img src="'+D+'" alt=""></p><h4>5.1.5 本节小结</h4><h5>I/O管理要完成哪些功能 ？</h5><blockquote><p>I/O管理需要完成以下4部分内容 ：</p><ol><li>状态跟踪。要能实时掌握外部设备的状态。</li><li>设备存取。要实现对设备的存取操作。</li><li>设备分配。在多用户环境下 ，负责设备的分配与回收。</li><li>设备控制。包括设备的驱动、完成和故障的中断处理。</li></ol></blockquote><h3>5.2 设备独立性软件</h3><p><img src="'+P+'" alt=""></p><p>注 ：设备独立性是指用户编程时使用的设备与实际使用的设备无关。</p><h4>5.2.1 设备独立性软件</h4><p><img src="'+S+'" alt=""> <img src="'+y+'" alt=""></p><h4>5.2.2 高速缓存与缓冲区</h4><p><img src="'+A+'" alt=""> <img src="'+B+'" alt=""></p><ul><li>单缓冲</li></ul><p><img src="'+M+'" alt=""> <img src="'+Z+'" alt=""></p><ul><li><p>双缓冲</p><p><img src="'+x+'" alt=""><br> 注 ：实现”同一时刻“下 ，数据的双向传输。</p></li><li><p>循环缓冲</p><p><img src="'+L+'" alt=""></p></li></ul><h4>5.2.3 设备分配与回收</h4><p><img src="'+U+'" alt=""><br> 注 ：设备分配常用的算法 ：1、先来先服务算法 2、最高优先级算法</p><p><img src="'+v+'" alt=""> <img src="'+E+'" alt=""> <img src="'+H+'" alt=""> <img src="'+N+'" alt=""> <img src="'+V+'" alt=""> <img src="'+j+'" alt=""></p><p><img src="'+z+'" alt=""> <img src="'+F+'" alt=""> <img src="'+G+'" alt=""> <img src="'+J+'" alt=""></p><h4>5.2.4 SPOOLing技术 （假脱机技术 ）</h4><p><img src="'+K+'" alt=""></p><p>注 ：</p><ul><li>其主要目的就是提高了独占设备 （技术前提 ）的利用率。</li><li>实现的基本条件是不仅要有大容量、高速度的外存作为输入和输出井 ，而且还要有SPOOLing软件。</li><li>是一种以空间换取时间的技术 ，能够提高作业执行的速度。</li><li>只需要外存蛤 ，不需要外围计算机。</li><li>建立在多道程序设计的基础上 ，在同一时间段内 ，输入进程、输出进程是可以和运行的作业进程并发执行的。</li></ul><p><img src="'+Q+'" alt=""> <img src="'+R+'" alt=""></p><h4>5.2.5 设备驱动程序接口</h4><h4>5.2.6 本节小结</h4><p>1 ）当处理机和外部设备的速度差距较大时 ，有什么办法可以解决问题 ？</p><blockquote><p>可采用缓冲技术来缓解CPU与外设速度上的矛盾 ，即在某个地方 （一般为主存 ）设立一片缓冲区 ，外设与CPU的输入/输出都经过缓冲区 ，这样外设和CPU就都不用互相等待。</p></blockquote><p>2 ）什么是设备的独立性 ？引入设备的独立性有什么好处 ？</p><blockquote><p>设备独立性是指用户在编程序时使用的设备与实际设备无关。一个程序应独立于分配给它的某类设备的具体设备 ，即在用户程序中只指明IO使用的设备类型即可。</p><p>设备独立性有以下优点 ：①方便用户编程。②使程序运行不受具体机器环境的限制。③便于程序移植。</p></blockquote><h3>5.3 磁盘和固态硬盘</h3><h4>5.3.1 磁盘</h4><p><img src="'+W+'" alt=""></p><p><img src="'+X+'" alt=""></p><h4>5.3.2 磁盘的管理</h4><p><img src="'+Y+'" alt=""></p><p><img src="'+$+'" alt=""><img src="'+ss+'" alt=""><img src="'+bs+'" alt=""></p><h4>5.3.3 磁盘调度算法</h4><p><img src="'+cs+'" alt=""></p><p><img src="'+as+'" alt=""><br> 注 ：减少延迟时间的方法有 ：1、交替编号 2、错位命名</p><p><img src="'+ts+'" alt=""><img src="'+es+'" alt=""><img src="'+ps+'" alt=""><img src="'+os+'" alt=""><img src="'+ls+'" alt=""><img src="'+is+'" alt=""></p><h4>5.3.4 固态硬盘</h4><p><img src="'+fs+'" alt=""></p><p>注 ：静态磨损均衡算法通常比动态磨损均衡算法的表现更优秀。</p><p><img src="'+ds+'" alt=""></p><h4>5.3.5 本节小结</h4><p>1 ）在磁盘上进行一次读/写操作需要哪几部分时间 ？其中哪部分时间最长 ？</p><blockquote><p>在磁盘上进行一次读/写操作花费的时间由寻道时间、延迟时间和传输时间决定。其中寻道时间是将磁头移动到指定磁道所需要的时间 ，延退时间是磁头定位到某一磁道的扇区 （块号 ）所需要的时间 ，传输时间是从磁盘读出或向磁盘写入数据所经历的时间。一般来说 ，寻道时间因为要移动磁头臂 ，所以占用时间最长。</p></blockquote><p>2 ）存储一个文件时 ，当一个磁道存储不下时 ，剩下部分是存在同一个盘面的不同磁道好还是存在同一个柱面上的不同盘面好 ？</p><blockquote><p>上一问经说到 ，寻道时间对于一次磁盘访问的影响是最大的 ，若存在同一个盘面的不同磁道 ，则磁头臂势必要移动 ，这样会大大增加文件的访问时间 ，而存在同一个柱面上的不同盘面就不需要移动磁道 ，所以一般情况下存在同一个柱面上的不同盘面更好。</p></blockquote><h3>5.4 本章疑难点</h3><h4>1、为了增加设备分配的灵活性、成功率 ，可以如何改进 ？</h4><blockquote><p>可以从以下两方面对基本的设备分配程序加以改进 ：</p><ol><li>增加设备的独立性 。进程使用逻辑设备名请求IO。这样 ，系统首先从SDT中找出第一个该类设备的DCT。若该设备忙 ，则又查找第二个该类设备的DCT。仅当所有该类设名都忙时 ，才将进程挂到该类设备的等待队列上 ：只要有一个该类设备可用 ，系统便进一步计算分配该设备的安全性。</li><li>考虑多通路情况 。为防止IO系统的“瓶颈”现象 ，通常采用多通路的IO系统结构。此时对控制器和通道的分配同样要经过几次反复 ，即若设备 （控制器 ）所连接的第一个控制器 （通道 ）忙时 ，则应查看其所连接的第二个控制器 （通道 ），仅当所有控制器 （通道 ）都忙时 ，此次的控制器 （通道 ）分配才算失败 ，才将进程挂到控制器 （通道 ）的等待队列上。而只要有一个控制器 （通道 ）可用 ，系统便可将它分配给进程。</li></ol><p>设备分配过程中 ，先后分别访问的数据结构为SDT→DCT→COCT→CHCT。要成功分配备一个设备 ，必须要 ：①设备可用 ：②控制器可用 ：③通道可用。所以 ，“设备分配 ，要过三关”。</p></blockquote><h4>2、什么是用户缓冲区、内核缓冲区 ？</h4><blockquote><p>5.1.4节中讨论过 ：“IO操作完成后 ，系统将数据从内核复制到用户空间”，这里说的是“内核”其实是指内核缓冲区 ，“用户空间”是指用户缓冲区。</p><p>用户缓冲区是指当用户进程读文件时 ，通常先申请一块内存数组 ，称为Buffer ，用来存放读取的数据。每次read调用 ，将读取的数据写入Buffer ，之后程序都从buffer中获取数据 ，当buffer使用完后 ，再进行下一次调用 ，填充buffer。可见 ，用户缓冲区的目的是减少系统调用次数 ，从而降低系统在用户态与核心态之间切换的开销。</p><p>内核也有自己的缓冲区。当用户进程从磁盘读取数据时 ，不直接读磁盘 ，而将内核缓冲区中的数据复制到用户缓冲区中。若内核缓冲区中没有数据 ，则内核请求从磁盘读取 ，然后将进程挂起 ，为其他进程服务 ，等到数据已读取到内核缓冲区中时 ，将内核缓冲区中的数据复制到用户进程的缓冲区 ，才通知进程 （当然 ，IO模型不同 ，处理的方式也不同 ）。当用户进程需要写数据时 ，数据可能不直接写入磁盘 ，而将数据写入内核缓冲区 ，时机适当时 （如内核缓冲区的数据积累到一定量后 ），内核才将内核缓冲区的数据写入磁盘。可见 ，内核缓冲区是为了在操作系统级别提高磁盘I/O效率 ，优化磁盘写操作。</p></blockquote>',69)])))}};export{us as category,ws as date,Is as default,Os as summary,hs as updated};
