import{o as a,c as p,a as t}from"./index-3fea0a0e.js";const e="/blog/assets/951a00d1c0834dd1b19f85e9fe2dec60-52f43cc3.webp",c="/blog/assets/201ec7c096334f9a8ceaec996536fceb-992c3466.webp",o="/blog/assets/0467737efbb64a9bbe47b754fe6f11d4-a72dde19.webp",l="/blog/assets/12a849934c86470fa4f2942806c65e41-01184b75.webp",i="/blog/assets/9da30bd1b6854bc1bb4b4013a3aeb632-ef0cc0f3.webp",d="/blog/assets/d8e1bb74dca243e0aee619df0809f342-5d06ca99.webp",f="/blog/assets/f005eb1d0d934b58943fe2930cf0067e-d6d12f37.webp",r="/blog/assets/33b354755c0e4833a37f0bc3d694cdb8-adbcd7ca.webp",m="/blog/assets/1ab8a196e19f44cb92236d646f8dd405-b9e7df7c.webp",_="/blog/assets/162fb4f953104b9d968bac86da4bbc56-02bdaee0.webp",g="/blog/assets/4ad773a5400c46c3a57e810f3c3d372c-5a05676f.webp",n="/blog/assets/17aeda7b0948440983068882e698bc46-4eaacbbb.webp",w="/blog/assets/cceeb649ac32451994aad58c7ed8754d-ba33cee0.webp",h="/blog/assets/febbb0481cd84c3f9815880b6bb95d63-c3246f56.webp",u="/blog/assets/229834103db042298483c6f71b2f5d15-ccbe1700.webp",k="/blog/assets/bdd83aac4b5e420fa5056cd379a43622-ff6f1221.webp",q="/blog/assets/4790b37b12874673a7ae509c020a0442-852ab4ff.webp",B="/blog/assets/8632ff7b946344338921ceb135d69b9e-693cd07e.webp",F="/blog/assets/e60f2bd90d0f450fbea823c587255bc1-040778b0.webp",y="/blog/assets/81852d66232642838db0d2bf852d9785-b03407cc.webp",O="/blog/assets/028d36543f854d178a692a35a015b0bd-faa46980.webp",T="/blog/assets/9c73382a9cf541ef867c7e424f22c03d-00689618.webp",x="/blog/assets/b18f4a615b9741d59d31e0b14b0c219b-25a9bc79.webp",C="/blog/assets/b9f402dfbe0049d6b5853bdf7b664479-b2ed64f3.webp",Z="/blog/assets/bb2ce3d1e1884dcc8a4356ef847d9267-57c5c1bf.webp",G="/blog/assets/b128696aaba944eb93316deeb4152e39-474ac9b5.webp",L="/blog/assets/9c02a583d5614b37831850efb785493b-f635e9fb.webp",N="/blog/assets/c9fa2b3ba2d44d92aca9d4c4e2bbbc5c-0883dfa1.webp",P="/blog/assets/fc7557dbe63944149f2e040d1811eeb2-b1302bc5.webp",I="/blog/assets/a9dd03d45123410b9dc54728b6b1188f-7a440381.webp",K="/blog/assets/55609e60a6dd446e99abe7760b322274-a7aab07b.webp",R="/blog/assets/5793c5d9d7b24aa982c903f03e78de49-531b649e.webp",U="/blog/assets/d4e5e13a2f9a4686a195867441a51093-05136fc8.webp",v="/blog/assets/1624270445334299bc47e25569c15c69-f5fd60d0.webp",A="/blog/assets/245d5d2936fb40138208102dcb38d5d3-e99cc732.webp",E="/blog/assets/949c8708a0ac4a3ca68c320d5ee51308-4adbf356.webp",S="/blog/assets/a744f7304d274978ad2889df0afee066-09fb83ff.webp",V="/blog/assets/ad65f5af58a84086a5df602cfd2e6950-1f7293df.webp",W="/blog/assets/ff66f6d3058b4c58a391983ce634f8b6-35c668d3.webp",j="/blog/assets/8328e2f848274fdaadb6aec4702ce5e7-d5d12990.webp",z="/blog/assets/0fdaab162e4041bfa81f558ffb1b7594-525c2f77.webp",D="/blog/assets/ca930f1ed63a48d580fca03a139aa437-984fc89f.webp",H="/blog/assets/b7fa4f6e777e426baeffb8cc71082473-7e4ffdfc.webp",J="/blog/assets/5f272bde720146e18af623c1080ce9b5-18617e2e.webp",M="/blog/assets/86d5a80054f84a96b25b03daf87af876-ed68c0c8.webp",Q="/blog/assets/2803c1003f704de087c4c939baf9d8ae-bb59c10f.webp",X="/blog/assets/ee72982a4f184f8aa75de9aff18ee8d1-06b489a0.webp",Y="/blog/assets/8f4ccaa527544bdc86232ed507d49b65-c4045358.webp",$="/blog/assets/adc6de1a5de34ad0bb9b1ab191c94ced-55cd1487.webp",ss="/blog/assets/d20b8d7af0bf4a3b96919bbb0e89b5f7-354f0306.webp",bs="/blog/assets/317d82bf45e5485f90334fb6539f18b5-d608198c.webp",as="/blog/assets/d99ba5799b7b4e4f88ea43cef0516b4f-d005a8c7.webp",ps="/blog/assets/440a51fd86d04171b62565f1930e1d0b-689720a6.webp",ts="/blog/assets/c6ac81cf886a479d804ec36354ac4b56-3d4a30af.webp",es="/blog/assets/9f329d0736514dd9ba0e76b2a7cb33c1-468617fb.webp",cs="/blog/assets/2c6714bc22bb43e8b521353fc06f99dd-848cb0aa.webp",os="/blog/assets/5aef5c0c96cb409496ee75bfd15f5ede-2a55b2a5.webp",ls="/blog/assets/4963b26afc1b4b2d948e720a8f79719d-1d256a65.webp",is="/blog/assets/6cf1df776925434b95da82e4cd0b86b1-e1436cb6.webp",ds="/blog/assets/2b098a27ed4a4869b7802348aa271cdf-b5b78e90.webp",fs="/blog/assets/168e745585454a0e83062ceaef94d592-f1db677a.webp",rs="/blog/assets/54d6e81315ac48859722d41a153960de-6b12e194.webp",ms="/blog/assets/327300a26252489da89c57f2c6f49749-26398a2a.webp",_s="/blog/assets/bf1ddca32ec8417e8594b47f5da0a981-61c0413b.webp",gs="/blog/assets/2a1ff6f7c6c84de7a2d84b51b27d108c-7f5f7aaf.webp",ns="/blog/assets/f3bf46c9de664c5abdd7833796a090f1-3b0e9be7.webp",ws="/blog/assets/f327f5ec69bb41bc9c69a308dd3cc92d-296160ed.webp",hs="/blog/assets/ca0a2f76af914b1cbad4f4370bb7a65f-231f2cc0.webp",us="/blog/assets/68575915bde8447c8a20a2ad2f7e630c-38752846.webp",ks="/blog/assets/8d2a780cddbc4489b32a9e63fd7b231f-7a133304.webp",qs="/blog/assets/c03434fb6dc04539b615b44fd4add891-97f886ef.webp",Bs="/blog/assets/fc086205f98d475a8bb990bada8144ca-81b0841e.webp",Fs="/blog/assets/49b3b08359424fe5806b8f7e1816f7aa-0756533f.webp",ys="/blog/assets/f2929775b48b47bba13c36aaedb03a82-faf7d495.webp",Os="/blog/assets/b780589be0c74252bb86dae129bae6bf-882584f4.webp",Ts="/blog/assets/3c64309f8221447e975f793416ecd40f-cedebda1.webp",xs="/blog/assets/77052eed5fce46a4bbecbb33b70acce8-c5aa2cca.webp",Cs="/blog/assets/49600b4d0e4c4a1b812e08caddc2d5d0-0e9bde37.webp",Zs="/blog/assets/e138c4131a20477485379b4728ae5a92-52b77e15.webp",Gs="/blog/assets/5e0531530b9144e989b0872d69e92963-bc79bbaa.webp",Ls="/blog/assets/9da75b4d13904c68be3a378a0369620d-9fbeb4db.webp",Ns={class:"markdown-body"},Us="2025-07-01T00:00:00.000Z",vs="2025-07-30T00:00:00.000Z",As="考研复习",Es="操作系统",Ss={__name:"操作系统_3",setup(Ps,{expose:b}){return b({frontmatter:{date:"2025-07-01T00:00:00.000Z",updated:"2025-07-30T00:00:00.000Z",category:"考研复习",summary:"操作系统"}}),(Ks,s)=>(a(),p("div",Ns,s[0]||(s[0]=[t('<h2>内存管理</h2><h3>3.1 内存管理概念</h3><h4>3.1.1 内存管理的基本原理和要求</h4><p><img src="'+e+'" alt=""></p><p><img src="'+c+'" alt=""></p><p>注 ：重定位寄存器也称基址寄存器、界地址寄存器也称为限长寄存器。</p><p><img src="'+o+'" alt=""></p><p>将用户程序变为可在内存中执行的程序的步骤 ：</p><p><img src="'+l+'" alt=""></p><p>1、程序的链接和装入</p><p><img src="'+i+'" alt=""></p><ol><li><p>绝对装入</p><p><img src="'+d+'" alt=""></p></li><li><p>可重定位装入</p><p><img src="'+f+'" alt=""></p></li><li><p>动态运行时装入</p><p><img src="'+r+'" alt=""></p></li></ol><p>链接的三种方式 ：</p><ol><li>静态链接 ：在程序运行之前 ，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件 （装入模块 ），之后不再拆开。</li><li>装入时动态链接 ：将各目标模块装入内存时 ，边装入边链接的链接方式。</li><li>运行时动态链接 ：在程序执行中需要该目标模块时 ，才对它进行链接。其优点是便于修改和更新 ，便于实现对目标模块的共享。</li></ol><h4>3.1.2 连续分配管理方式</h4><p><img src="'+m+'" alt=""></p><ol><li><p>单一连续分配</p><p><img src="'+_+'" alt=""></p></li><li><p>固定分区分配</p><p><img src="'+g+'" alt=""> <img src="'+n+'" alt=""></p></li><li><p>动态分区分配</p><p><img src="'+w+'" alt=""> <img src="'+h+'" alt=""></p><ol><li><p>系统要用什么样的数据结构记录内存的使用情况 ？</p><p><img src="'+u+'" alt=""></p></li><li><p>当很多个空闲分区都能满足需求时 ，应该选择哪个分区进行分配 ？</p><p><img src="'+k+'" alt=""></p></li><li><p>如何进行分区的分配与回收操作 ？</p><p>将相邻的空闲空间合并。</p></li></ol></li></ol><p>动态分区分配算法</p><p><img src="'+q+'" alt=""></p><h5>1 首次适应算法 （First Fit ）</h5><p><img src="'+B+'" alt=""></p><h5>2 邻近适应 （Next Fit ）算法</h5><p><img src="'+F+'" alt=""></p><h5>3 最佳适应 （Best Fit ）算法</h5><p><img src="'+y+'" alt=""></p><h5>4 最坏适应 （Worst Fit ）算法</h5><p><img src="'+O+'" alt=""></p><h4>3.1.3 基本分页存储管理</h4><p><img src="'+T+'" alt=""></p><h5>1 分页存储的基本概念</h5><p>分页存储的定义 ：</p><p><img src="'+x+'" alt=""></p><p>重要的存储结构——页表</p><p><img src="'+C+'" alt=""></p><p>每个页表项占多少字节 ？</p><p><img src="'+Z+'" alt=""> <img src="'+G+'" alt=""> <img src="'+L+'" alt=""></p><p>注 ：页表是隐含的 ！！！</p><p>如何实现地址的转换 ？</p><p><img src="'+N+'" alt=""> <img src="'+P+'" alt=""> <img src="'+I+'" alt=""> <img src="'+K+'" alt=""> <img src="'+R+'" alt=""></p><p>逻辑地址结构</p><p><img src="'+U+'" alt=""></p><h5>2 基本地址变换机构</h5><p><img src="'+v+'" alt=""></p><p><img src="'+A+'" alt=""> <img src="'+E+'" alt=""></p><h5>3 具有快表的地址变换机构</h5><p><img src="'+S+'" alt=""></p><p>快表是什么 ？</p><p><img src="'+V+'" alt=""></p><p><img src="'+W+'" alt=""> <img src="'+j+'" alt=""></p><h5>4 两级页表</h5><p><img src="'+z+'" alt=""></p><p><img src="'+D+'" alt=""> <img src="'+H+'" alt=""></p><p><img src="'+J+'" alt=""></p><p><img src="'+M+'" alt=""></p><p><img src="'+Q+'" alt=""></p><h4>3.1.4 基本分段存储管理</h4><p><img src="'+X+'" alt=""></p><p><img src="'+Y+'" alt=""> <img src="'+$+'" alt=""> <img src="'+ss+'" alt=""></p><p>分页、分段管理的对比 ：</p><p><img src="'+bs+'" alt=""> <img src="'+as+'" alt=""> <img src="'+ps+'" alt=""></p><h4>3.1.5 段页式存储管理</h4><p><img src="'+ts+'" alt=""> <img src="'+es+'" alt=""> <img src="'+cs+'" alt=""></p><p>引入段式存储管理方式 ，主要是为了更好地满足用户的一系列要求。</p><ol><li>方便编程</li><li>共享和保护</li><li>动态链接和增长</li></ol><h4>3.1.6 本节小结</h4><p>1 ）为什么要进行内存管理 ？</p><blockquote><p>在单道批系统阶段 ，一个系统在一个时间段内只执行一个程序 ，内存的分配极其简单 ，即仅分配给当前运行的进程。引入多道批程序后 ，进程之间共享的不仅仅是处理机 ，还有主存储器。然而 ，共享主存会形成一些特殊的挑战。若不对内存进行管理 ，则容易导致内存数据的混乱 ，以至于影响进程的并发执行。因此 ，为了更好地支持多道程序并发执行 ，必须进行内存管理。</p></blockquote><p>2 ）多级页表解决了什么问题 ？又会带来什么问题 ？</p><blockquote><p>多级页表解决了当逻辑地址空间过大时 ，页表的长度会大大增加的问题。而采用多级页表时 ，一次访盘需要多次访问内存甚至磁盘 ，会大大增加一次访存的时间。</p><p>无论是段式管理、页式管理还是段页式管理 ，读者都只需要掌握下面三个关键问题 ：</p><ol><li>逻辑地址结构</li><li>页 （段 ）表项结构</li><li>寻址过程。</li></ol><p>搞清楚这三个问题 ，就相当于搞清楚了上面几种存储管理方式。再次提醒读者区分逻辑地址结构和表项结构。</p></blockquote><h3>3.2 虚拟内存管理</h3><h4>3.2.1 虚拟内存的基本概念</h4><p><img src="'+os+'" alt=""></p><ul><li><p>传统存储管理方式的特征</p><p><img src="'+ls+'" alt=""></p></li><li><p>虚拟内存器的定义和特征</p><p><img src="'+is+'" alt=""></p></li><li><p>虚拟内存技术的实现</p><p><img src="'+ds+'" alt=""></p></li></ul><h4>3.2.2 请求分页管理方式</h4><p><img src="'+fs+'" alt=""></p><ul><li><p>页表机制</p><p><img src="'+rs+'" alt=""></p></li><li><p>缺页中断机构</p><p><img src="'+ms+'" alt=""> <img src="'+_s+'" alt=""></p></li><li><p>地址变换机构</p><p><img src="'+gs+'" alt=""> <img src="'+ns+'" alt=""> <img src="'+ws+'" alt=""></p><p>注 ：只有写指令才需要修改“修改位”。</p></li></ul><h4>3.2.3 页框分配</h4><p><img src="'+hs+'" alt=""></p><p><img src="'+us+'" alt=""> <img src="'+ks+'" alt=""> <img src="'+qs+'" alt=""> <img src="'+Bs+'" alt=""></p><h4>3.2.4 页面置换算法</h4><p><img src="'+Fs+'" alt=""></p><p>注 ：Belady异常 （Bélády &#39;s Anomaly ）是计算机存储管理中的一个现象 ，它指的是在某些内存访问模式下 ，增加页面框 （Page Frames ）的数量反而会导致页面错误 （Page Faults ）次数增加。</p><h5>1 最佳 （OPT ）置换算法</h5><p><img src="'+ys+'" alt=""></p><h5>2 先进先出 （FIFO ）算法</h5><p><img src="'+Os+'" alt=""></p><h5>3 最近最久未使用 （LRU ）算法</h5><p><img src="'+Ts+'" alt=""></p><h5>4 时钟 （CLOCK/NRU ） 置换算法</h5><p><img src="'+xs+'" alt=""></p><p>改进型CLOCK置换算法</p><p><img src="'+Cs+'" alt=""></p><p>注 ：二改访00010001</p><h4>3.2.5 抖动和工作集</h4><p><img src="'+Zs+'" alt=""></p><h4>3.2.6 内存映射文件</h4><p>这就是操作系统向应用程序提供的一个系统调用 ，它与虚拟内存有些相似 ，在磁盘文件与进程的虚拟地址空间之间建立映射关系。</p><p>将一个文件当作内存中的一个大字符数组来访问而不通过文件I/O ，这显然更便利。</p><p><img src="'+Gs+'" alt=""></p><h4>3.2.7 虚拟存储器性能影响因素</h4><p>缺页率是影响虚拟存储器性能的主要因素 ，而缺页率又受到页面大小、分配给进程的物理块数、页面置换算法以及程序的编制方法的影响。</p><h4>3.2.8 地址翻译</h4><h4>3.2.9 本节小结</h4><p>1 ）为什么要引入虚拟内存 ？</p><blockquote><p>上一节提到过 ，多道程序并发执行不仅使进程之间共享了处理器 ，而且同时共享了主存。然而 ，随着对处理器需求的增长 ，进程的执行速度会以某种合理平滑的方式慢下来。但是 ，若同时运行的进程太多 ，则需要很多的内存 ，当一个程序没有内存空间可用时 ，那么它甚至无法运行。所以 ，在物理上扩展内存相对有限的条件下 ，应尝试以一些其他可行的方式在逻辑上扩充内存。</p></blockquote><p>2 ）虚拟内存 （虚存 ）空间的大小由什么因素决定 ？</p><blockquote><p>虚存的容量要满足以下两个条件</p><ol><li>虚存的实际容量 ≤ 内存容量和外存容量之和 ，这是硬件的硬性条件规定的 ，若虚存的实际容量超过了这个容量 ，则没有相应的空间来供虚存使用。</li><li>虚存的最大容量 ≤ 计算机的地址位数能容纳的最大容量。假设地址是32位的 ，按字节编址 ，一个地址代表1B存储空间 ，则虚存的最大容量≤4GB （2^32B ）。这是因为若虚存的最大容量超过4GB ，则32位的地址将无法访问全部虚存 ，也就是说4GB以后的空间被浪费了 ，相当于没有一样 ，没有任何意义 。</li></ol><p>实际虚存的容量是取条件1和2的交集 ，即两个条件都要满足 ，仅满足一个条件是不行的。</p></blockquote><p>3 ）虚拟内存是怎么解决问题的 ？会带来什么问题 ？</p><blockquote><p>虚拟内存使用外存上的空间来扩充内存空间 ，通过一定的换入/换出 ，使得整个系统在逻辑上能够使用一个远远超出其物理内存大小的内存容量。因为虚拟内存技术调换页面时需要访问外存 ，会导致平均访存时间增加 ，若使用了不合适的替换算法 ，则会大大降低系统性能。 本节学习了4种页面置换算法 ，要将它们与处理机调度算法区分开。当然 ，这些调度算法之间也是有联系的 ，它们都有一个共同点 ，即通过一定的准则决定资源的分配对象。在处理机调度算法中这些准则比较多 ，有优先级、响应比、时间片等 ，而在页面调度算法中就比较简单 ，即是否被用到过或近段时间内是否经常使用。在操作系统中 ，几乎每类资源都会有相关的调度算法读者通过将这些调度算法作为线索 ，可将整个操作系统的课程连成一个整体。</p></blockquote><h3>3.3 本章疑难点</h3><p><img src="'+Ls+'" alt=""></p>',111)])))}};export{As as category,Us as date,Ss as default,Es as summary,vs as updated};
