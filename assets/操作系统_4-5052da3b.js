const n=`---
date: 2025-07-01
updated: 2025-07-30
category: 考研复习
summary: 操作系统4文件系统 
---

## 4.1 文件系统基础

![](./../../public/assets/os/58cf4d50c61c4b3b87e1c9227dd4b941.webp)

### 4.1.1 文件的基本概念

![](./../../public/assets/os/a49dd62a8d0541c996d136c2ddbd49b1.webp)

一个文件有哪些属性 ？

> +   文件名 ：由创建文件的用户决定文件名 ，主要是为了方使用户找到文件 ，同一目录下不允许有重名文件。
> +   标识符 ：一个系统内的各文件标识符唯一 ，对用户来说毫无可读性因此标识符只是操作系统用于区分各个文件的一种内部名称。
> +   类型 ：指明文件的类型
> +   位置 ：文件存放的路径 （让用户使用 ）、在外存中的地址 （操作系统使用 ，对用户不可见 ）
> +   大小 ：指明文件大小创建时间、上次修改时间、文件所有者信息
> +   保护信息 ：对文件进行保护的访问控制信息

![](./../../public/assets/os/61e97c38cadf4d42ac9bc6de2ff632f2.webp) ![](./../../public/assets/os/78cf9c2493b348f9a4752755ec2a8b01.webp) ![](./../../public/assets/os/fb5e6be1a1a24729bdf9425b24991b9b.webp) ![](./../../public/assets/os/db173395b6234f9086a840f8017b682b.webp)

### 4.1.2 文件控制块和索引节点

+   文件控制块  
    
    ![](./../../public/assets/os/0a697e5019e84ce7b2ebbe43f53c6a88.webp)
+   索引节点  
    
    ![](./../../public/assets/os/e548c1b80b2d4da1b765284796c653a4.webp)

### 4.1.3 文件的操作

![](./../../public/assets/os/9331a7c3b75b42709695505abe6c54e7.webp) ![](./../../public/assets/os/fc4f2691ed59433a8ed90add237b0a2a.webp)

![](./../../public/assets/os/6b824bcf78e3462b81713930087ee024.webp)

注 ：

+   打开文件表有两种 （系统及级进程自己的 ）
+   只要完成了文件打开open()系统调用 ，后面再使用别的文件操作的系统调用 ，就不再使用文件名 ，而使用文件描述符。

#### 创建文件 

（分配空间 ，创建目录项 ）  

![](./../../public/assets/os/e8329f9e33c7429dab7a5d4d7135deb9.webp)

#### 删除文件 

（找目录 ，删除目录项 and PCB ，回收空间 （磁盘空间和内存缓9冲区 ）  

![](./../../public/assets/os/0d6ac6fede1247fb9fdcace3fd80ef61.webp)

#### 读文件 

![](./../../public/assets/os/64a8d73956744bcea8900322c20cbd3b.webp)

#### 写文件   

![](./../../public/assets/os/810a0b758a9340b8b6852bb3287f1ed8.webp)

#### 打开文件  

![](./../../public/assets/os/ad238ccfde834c1497c85a3b95156d4d.webp) ![](./../../public/assets/os/da2f046cd088472f963c8754fb92c0d3.webp)

#### 关闭文件  

![](./../../public/assets/os/c1555320ffdf4506918f29993ade9b4e.webp)

### 4.1.4 文件保护

> 为保证未经文件拥有者授权，任何其他用户不能使用该文件，所提供的方法

![](./../../public/assets/os/62c1466a628c4f23a5cdf77a5a0124ff.webp)

### 4.1.5 文件的逻辑结构

从用户角度看到的文件的全貌。

![](./../../public/assets/os/091da71b8db4489a891e6e100c5b025c.webp)

#### 无结构文件  

![](./../../public/assets/os/f149ff6b5dfb4488a90ecc602fafad92.webp)

#### 有结构文件 

![](./../../public/assets/os/4c77dfdf41a94a3184caa0972ac1daf9.webp)

#### 顺序文件  

![](./../../public/assets/os/e6a5b41461804dc59617dade8f09f414.webp)  
注 ：链式存储 （串存储 ）

#### 索引文件  

![](./../../public/assets/os/c0c97324baaa41189ac6a562af221120.webp)

#### 索引顺序文件  

![](./../../public/assets/os/3fde875d66044b728370dd7e82bb9c34.webp) ![](./../../public/assets/os/c4e985fecf23457e9a4c781b95a8a32f.webp) ![](./../../public/assets/os/c23dd4facaa6413487b985f25d1b306b.webp)

注 ：索引文件和索引顺序文件都提高了查找速度 ，但都因配置索引表而增加了存储空间。

### 4.1.6 文件的物理结构

文件在存储器上的组织结构 （从OS的角度看到的文件的全貌 ）。

![](./../../public/assets/os/47f572daa465437fa5ee004f07679c47.webp)

![](./../../public/assets/os/2679d26da7ff4bf0ad844e1cfed4f941.webp)

#### 连续分配  

![](./../../public/assets/os/0c511217604c4409b966457417bd5fc2.webp)  
注 ：缺点 ：会产生碎片 （外部 )且不方便扩展。

#### 链接分配 

![](./../../public/assets/os/660ac0e69d70462a939e0e9a176dff41.webp)

1.  显式链接 ： FAT在整个磁盘中只有一张 ，常驻内存、开机读入内存。（盘块号可隐含 ）
    
    >  优点 ：支持顺序访问、直接访问 ，检索速度快。
    >
    >  缺点 ：FAT需要占用一定的内存空间。
    
    ![显示链接](./../../public/assets/os/显示链接.png)
    
2.  隐式链接 （Default ）  
    
    ![](./../../public/assets/os/5f8fb06e44d54a4bbe599c318bbbdd3e.webp)

#### 索引分配  

![](./../../public/assets/os/822bbd46fa074414a57a2e10c58b39e0.webp) ![](./../../public/assets/os/3e2ab21e55e1409b92d6f99a5dcf95a0.webp)
1.  链接方案 （单级索引分配方式 ）  
    
    ![](./../../public/assets/os/3b3b37773be5418980e921850517fa9f.webp)
2.  多级索引分配方式  
    
    ![](./../../public/assets/os/f3953e8c14f04ec7a291368926fb2eb5.webp)
3.  混合索引分配方式  
    
    ![](./../../public/assets/os/7f40b902c02848348c4c677e1dce1ca8.webp)

### 4.1.7 本节小结

1 ）什么是文件 ？

> 文件是以计算机硬盘为载体的存储在计算机上的信息集合 ，它的形式多样。

2 ）单个文件的逻辑结构和物理结构之间是否存在某些制约关系 ？

> 文件的逻辑结构是用户可见的结构 ，即从用户角度看到的文件的全貌。文件的物理结构是文件在存储器上的组织结构。它和文件的存取方法以及存储设备的特性等都有着密切的联系。单个文件的逻辑结构和物理结构之间虽无明显的制约或关联关系 ，但是如果物理结构选择不慎 ，也很难体现出逻辑结构的特点 ，比如一个逻辑结构是顺序结构 ，而物理结构是隐式链接结构的文件 ，即使理论上可以很快找出某条记录的地址 ，而实际仍需在磁盘上一块一块地找。  
> 学到这里时 ，读者应能有这样的体会 ：现代操作系统的思想中 ，处处能见到面向对象程序设计的影子。本节我们学习的一个新概念一—文件 ，实质上就是一个抽象数据类型 ，也就是一种数据结构 ，若读者在复习操作系统之前已复习完数据结构 ，则遇到一种新的数据结构时 ，一定会有这样的意识 ：要认识它的逻辑结构、物理结构 ，以及对这种数据结构的操作。

## 4.2 目录

![](./../../public/assets/os/397d514be7a94f90982639e1e6881f28.webp)

### 4.2.1 目录的基本概念

![](./../../public/assets/os/598a184514b944db9700848d47aab2f2.webp) ![](./../../public/assets/os/e710eb38d800416580c1ce20d1a46577.webp)

### 4.2.2 目录结构

1.  单级目录结构  
    
    ![](./../../public/assets/os/141f2787023342bdbea729429acd92b8.webp) 单级目录结构实现了“按名存取”，但是存在查找速度慢、文件不允许重名、不便于文件共享等缺点 ，而且对于多用户的操作系统显然是不适用的。
2.  两级目录结构  
    
    ![](./../../public/assets/os/37e770bba9974697b67b72539148ef48.webp)  
    两级目录结构提高了检索的速度 ，解决了多用户之间的文件重名问题 ，文件系统可以在目录上实现访问限制。但是两级目录结构缺乏灵活性 ，不能对文件分类。
3.  树形目录结构  
    
    ![](./../../public/assets/os/2f553af79c6748a68055ee362d4b0849.webp) 树形目录结构可以很方便地对文件进行分类 ，层次结构清晰 ，也能够更有效地进行文件的管理和保护。在树形目录中 ，不同性质、不同用户的文件 ，可以分别呈现在系统目录树的不同层次或不同子树中 ，很容易地赋予不同的存取权限。但是 ，在树形目录中查找一个文件 ，需要按路径名逐级访问中间节点 ，增加了磁盘访问次数 ，这无疑会影响查询速度。 目前 ，大多数操作系统如UNIX、Linux和Windows系统都采用了树形文件目录。
4.  无环图目录结构  
    
    ![](./../../public/assets/os/e6ada724ac70459f9b3b9ba80f5f40f6.webp)

### 4.2.3 目录的操作

+   搜索 ：当用户使用一个文件时 ，需要搜索目录 ，以找到该文件的对应目录项。
+   创建文件 ：当创建一个新文件时 ，需要在目录中增加一个目录项。
+   删除文件 ：当删除一个文件时 ，需要在目录中删除相应的目录项
+   创建目录 ：在树形目录结构中 ，用户可创建白己的用户文件目录 ，并可再创建子目录删除目录。有两种方式 ：
    +   不删除非空目录 ，删除时要先删除目录中的所有文件 ，并递归地删除子目录。
    +   可删除非空目录 ，目录中的文件和子目录同时被删除。
+   移动目录 ：将文件或子目录在不同的父目录之间移动 ，文件的路径名也会随之改变。
+   显示目录 ：用户可以请求显示目录的内容 ，如显示该用户目录中的所有文件及属性。
+   修改目录 ：某些文件属性保存在目录中 ，因而这些属性的变化需要改变相应的目录项。

### 4.2.4 目录实现

### 4.2.5 文件共享

![](./../../public/assets/os/9220d26e82064cf682d50e5e12f4b59b.webp)

1.  基于索引节点的共享方式 （硬链接 ）  
    
    ![](./../../public/assets/os/78d14eb883e24dbb9cfac2eedca82218.webp)
2.  利用符号实现文件共享 （软链接 ）  
    
    ![](./../../public/assets/os/9381c7f5b383448cb40d9df24740660c.webp)

### 4.2.6 本节小结

1 ）目录管理的要求是什么 ？

> 1.  实现“按名存取”，这是目录管理最基本的功能。
> 2.  提高对目录的检索速度 ，从而提高对文件的存取速度。
> 3.  为了方便用户共享文件 ，目录还需要提供用于控制访问文件的信息。
> 4.  允许不同用户对不同文件采用相同的名字 ，以使用户按自己的习惯给文件命名。

2 ）在目录中查找某个文件可以使用什么方法 ？

> 可以采用线性列表法或哈希表法。线性列表将文件名组织成一个线性表 ，查找时依次与线性表中的每个表项进行比较。
>
> +   若将文件名按序排列 ，则使用折半查找法可以降低平均的查找时间但建立新文件时会增加维护线性表的开销。
> +   哈希表用文件名通过哈希函数得到一个指向文件的指针 ，这种方法非常迅速 ，但要注意避免冲突。

## 4.3 文件系统

![](./../../public/assets/os/833f353df78c42609280080edf262f4a.webp)

![](./../../public/assets/os/7fb8b3e42eef4b579e9df11605d57d7b.webp) ![](./../../public/assets/os/d9a13e40f108450cb5503544443143a3.webp) ![](./../../public/assets/os/98431294942b45038b8b694e6e211a07.webp)

#### 磁盘空闲空间管理的方法

1.  空闲表法  
    
    ![](./../../public/assets/os/9057949775644488883a3ca32e3c0d42.webp)
2.  空闲链表法
    1.  空闲盘块链  
        
        ![](./../../public/assets/os/467b87f564b84bf9bd5f25b03fe5f477.webp) ![](./../../public/assets/os/4ff12037ce6d4cf4aad1271b6182f4e9.webp)
    2.  空闲盘区链  
        
        ![](./../../public/assets/os/3d6498dfd0544377b1f749dcd5ecfd45.webp)
3.  位示图法  
    
    ![](./../../public/assets/os/6219640526dd4bd4a9f162e54c15b455.webp) ![](./../../public/assets/os/34238442c89244ada386247b65850cf8.webp)
4.  成组链接法  
    
    ![](./../../public/assets/os/76691ace96ea4d5aa10512c52f29f1cb.webp) ![](./../../public/assets/os/e315b87136c044dbaf7f6f7ce53a691b.webp) ![](./../../public/assets/os/e0c6b36b35974e3c9a8d9f1739c4bff0.webp) ![](./../../public/assets/os/988759177bd84837b354de0c14c67c5c.webp) ![](./../../public/assets/os/e939fd5e9c604f499f185a85bbcd912a.webp)

虚拟文件系统VFS所定义的对象类型

> （1 ）超级块对象 ：表示一个已安装 （或称挂载 ）的特定文件系统。超级块对象对应于磁盘上特定扇区的文件系统超级块 ，用于存储已安装文件系统的元信息。其操作方法包含一系列可在超级块对象上调用的操作函数 ，主要有分配inode、销毁inode、读inode、写inode等。 
> （2 ）索引节点对象 ：表示一个特定的文件。索引节点和文件是一对一的关系。只有当文件被访问时 ，才在内存中创建索引节点对象 ，每个索引节点对象都会复制磁盘索引节点包含的一些数据。索引节点对象还提供许多操作函数 ，如创建新索引节点、创建硬链接、创建新目录等。 
> （3 ）目录项对象 ：表示一个特定的目录项。目录项对象是一个路径的组成部分 ，它包含指向关联索引节点的指针 ，还包含指向父目录和指向子目录的指针。不同于前面两个对象 ，目录项对象在磁盘上没有对应的数据结构 ，而是VFS在遍历路径的过程中 ，将它们逐个解析成目录项对象的。
>
> （4 ）文件对象 ：表示一个与进程相关的已打开文件。可以通过调用openO打开一个文件 ，通过调用closeO关闭一个文件。文件对象和物理文件的关系类似于进程和程序的关系。文件对象仅是进程视角上代表已打开的文件 ，它反过来指向其索引节点。文件对象包含与该文件相关联的目录项对象 ，包含该文件的文件系统、文件指针等 ，还包含在该文件对象上的一系列操作函数。当进程发起一个面向文件的系统调用时 ，内核调用VFS中的一个函数 ，该函数调用目标文件系统中的相应函数 ，将文件系统请求转换到面向设备的指令。以在用户空间调用writeO为例 ，它在VFS中通过sys\\_writeO函数处理 ，sys\\_writeO找到具体文件系统提供的写方法 ，将控制权交给该文件系统 ，最后由该文件系统与物理介质交互并写入数据 ，如图所示。

## 4.4 本章疑难点

### 1、文件的物理分配方式的比较

![](./../../public/assets/os/91487ea9e1eb4f87a0df0bf27d1a62c8.webp)

### 2、文件打开的过程描述

> 1.  检索目录 ，要求打开的文件应该是已经创建的文件 ，它应登记在文件目录中 ，否则会出错。在检索到指定文件后 ，就将其磁盘iNode复制到活动iNode表中。
> 2.  将参数mode所给出的打开方式与活动iNode中在创建文件时所记录的文件访问权限相比较 ，如果合法 ，则此次打开操作成功。
> 3.  当打开合法时 ，为文件分配用户打开文件表表项和系统打开文件表表项 ，并为后者设置初值 ，通过指针建立表项与活动iode之间的联系 ，再将文件描述符f返回给调用者。
`;export{n as default};
