import{o as a,c as e,a as c}from"./index-84828523.js";const p="/blog/assets/73bdd5f627934b8f946376724fd7d4fc-e2d34c1a.webp",t="/blog/assets/7100b4090b4b4789b9e5b54463d34442-0f6006ee.webp",o="/blog/assets/6da124e47c294d48a992969fc927f968-87941a20.webp",l="/blog/assets/69d414501373468dbc4a225bafa71677-c64c1016.webp",i="/blog/assets/a46db6563ba1462f9a8023115e7bb79c-e232e38d.webp",f="/blog/assets/8c2c7ec825ab4a54a881f0499ff948ec-5ab00228.webp",d="/blog/assets/e8c2102128d147cca1839b18cb6b6f44-4f1fe848.webp",r="/blog/assets/beb2542465a5427484455a21e4e75859-22f27d69.webp",m="/blog/assets/0ffe6b1b04c84ad49ad2864bc5e5c86a-0671dca1.webp",_="/blog/assets/6cf869e9211949a7aaa156f01bb539d2-25394830.webp",g="/blog/assets/5f28cbca3191421d8b22ad53e8bb0b52-64d5298e.webp",n="/blog/assets/16a8fb2bd8d74a508068b199169fc2f0-f111b194.webp",w="/blog/assets/9ff5748a76d543949ec9541d2c54a2e1-cb492f0d.webp",h="/blog/assets/85c6ae2e9334469b95563f7f5bf48942-2553d9a4.webp",u="/blog/assets/04f550140293441da8fac90d9832a8ff-68855aa0.webp",C="/blog/assets/1e31d0ec152b463284f87853e5714ead-6f1d2eff.webp",P="/blog/assets/f3df176c717945cabc26a3d4b6008e0b-8c7e32a1.webp",U="/blog/assets/242a73a48ee1469eb66023c0b68afc16-8d158e09.webp",k="/blog/assets/eef37159f54348f68762b0fb80255f24-995a5d8f.webp",q="/blog/assets/c2bd40d11f9a42f0842a1da1bc9bb3e1-73f42413.webp",B="/blog/assets/4dcc6ac3bee44b1c9acbb0cb2776d7d8-3ff3cca3.webp",T="/blog/assets/2ca1b87902424eb58b021adf6abb9134-39f534ae.webp",y="/blog/assets/21e10ad486384e66af447da6ba96622e-0a56da49.webp",S="/blog/assets/5060cfbb6ca74be78afbaf9a2338c200-23647f0a.webp",Z="/blog/assets/1944d85ef4b94716bf2420905f6aad34-ee1f0076.webp",x="/blog/assets/2ec906b63cf147af82ad6cbb865d9119-ebe1addf.webp",F="/blog/assets/299b84a72a654fa0a8427faccc8f7e8b-9d00a97c.webp",R="/blog/assets/2eeb2894cb51408ea4f7e50d758982e0-d055fde9.webp",v="/blog/assets/eee1476ab70845a2b0e484777ca6ef87-c5b4c341.webp",A="/blog/assets/06d2aa2ce2ee4b7487ace35b70dc0d49-b8adab00.webp",E="/blog/assets/6ffc07707993479592f2a573d5677f6b-bcaa14ee.webp",J="/blog/assets/7cd0d115e37840b48aa694dbfe1545ef-1f4e14a6.webp",N="/blog/assets/f3727d533e4845fb93851021fa829835-19b93eb3.webp",V="/blog/assets/56b56c2969394d27bcc652de7d918f42-e59021f9.webp",j="/blog/assets/a9dbb9d4fb8445549e938090a4c08f3c-474bc6c6.webp",z="/blog/assets/26f022ddbc534579a248d4b414d237bc-557962c1.webp",D="/blog/assets/50918da9cf7f42e18639f08ab0516b42-17a14e0b.webp",G="/blog/assets/32612d79539140b7bc4d44bd7853f452-e1467f7d.webp",H="/blog/assets/bd06f5614e7a4034b095750a718b8ac4-63a9f360.webp",I="/blog/assets/2284ff3a8c9f4b4596e697156af856fa-99525104.webp",K="/blog/assets/9208766fa34a43e2ba30b5dd1927b5a7-b7e2648c.webp",L="/blog/assets/0e4e88995abc4938b66c79c5d30fc368-d4e76d71.webp",M="/blog/assets/752c8187135e428c89af287856548389-63c6146a.webp",O="/blog/assets/f5814d2f5de04cdfab53be8d76f4bac1-1663aae8.webp",Q="/blog/assets/7e73dc12c6614e1bb0cd39394868c1dd-76f1d96f.webp",W="/blog/assets/c9785c879bcc44aebfcab11cfcf92f38-ac75903b.webp",X="/blog/assets/d46acb98489d42c7915657fc5300ff6d-9cf1e4ac.webp",Y="/blog/assets/a17577df78be4f7396fed81ab8026750-75981c82.webp",$="/blog/assets/5f15a932ebf943db974e19713cdc898b-b7b00bd6.webp",ss="/blog/assets/c91d04480d55426cad6a7c9a46a95835-e474c128.webp",bs="/blog/assets/7586ff06fdce4e6c9c4d0b8c23929275-1fba9cde.webp",as="/blog/assets/ae4f89b76a2c4544b851b30daadcc9d6-cf4fa664.webp",es="/blog/assets/51f0308d05274d9dae859d1b871b9027-ca7e7336.webp",cs="/blog/assets/770a7fb20f044171b174d8822c53e680-3cec4f15.webp",ps="/blog/assets/c4be742ae84741a099c5fdd896b3ca82-efc9f2f7.webp",ts="/blog/assets/768d090cde6b46b49790a31f907ba79d-10984432.webp",os="/blog/assets/0b45475038044c0e88a3e1dad111a861-d3f37408.webp",ls="/blog/assets/363a26543ad74f39afb785d6bd2ee7dd-ade750fa.webp",is="/blog/assets/5b2ebe95602f44e4bb21eca6297aab0c-809271fb.webp",fs="/blog/assets/0d5eae04f8f04ed99aefbc8f1eb20dc9-3a152a40.webp",ds="/blog/assets/3bcaf0847b624952b432cde3ab01cf77-e2f752b9.webp",rs="/blog/assets/89728cf9e7074367add63b0d1dd269c9-a4444a5b.webp",ms="/blog/assets/894edf7b196246218eb95aa9f66e6aa1-b56ff8b9.webp",_s="/blog/assets/9cedcbef37f147efab1f2307375c39a4-6d416f70.webp",gs="/blog/assets/c0da67e3487f4977b1aa1005b089ea61-5a24820f.webp",ns="/blog/assets/cdf7f65e56394032b2f63f643424277e-5c6096c6.webp",ws="/blog/assets/0e07e17e6cb944ac91f7d920c7e8c5db-3bbabe8e.webp",hs="/blog/assets/03b30fdb0a9848c89933fd006121b1dd-799febc7.webp",us="/blog/assets/e4f640d60d5a4410851d6432dd109ca5-98fe1cb9.webp",Cs="/blog/assets/19b1322aa4834ad699182ffd3d062d5c-3a76d1b3.webp",Ps="/blog/assets/390faa882f7949218a954fdf63ded81a-2689da92.webp",Us="/blog/assets/1b552a7d9c9c44b2936a38cceadaefea-560d6f2d.webp",ks="/blog/assets/fc96888b3fa549fc8147383d7dbc84e8-320259bd.webp",qs="/blog/assets/daa82cf54aef4cd7a1a1f6135da5a104-7e092123.webp",Bs="/blog/assets/fca0f20d0e7b4b098a5d594dfac1e184-abbfbff1.webp",Ts="/blog/assets/7e38f067880446649f014f5fba504ff7-c096a170.webp",ys="/blog/assets/5ceeb5373d74446c89fc5c06980f4652-6d69470d.webp",Ss="/blog/assets/e5613317df3d4fc4aa88cd7bd41e3e96-b1d6318c.webp",Zs="/blog/assets/a34c88d1ef6f4a1bb9b0916758f42d98-ec33c13e.webp",xs="/blog/assets/e2f0ed91e1d643dfa3e8e3fbc17a1371-1beea80c.webp",Fs="/blog/assets/3c842c22858c4f3d98a4ce250e29260d-46a07d9b.webp",Rs="/blog/assets/0aebd1ba46b342aeaa14e88df52239b9-152fa439.webp",vs="/blog/assets/e1ced705cce947038d39069388e9d185-83a15bb4.webp",As="/blog/assets/ccd4b1a5ddaa41fb86c4ee1bee037007-e7e6f966.webp",Es="/blog/assets/0715bb4a913d42d99636677035aa1cb9-f8faab65.webp",Js="/blog/assets/e40adfc685ca42d3a762adf655f01381-228171ff.webp",Ns="/blog/assets/cc0be922c5a6488b955b1c5afaffd68b-751b9713.webp",Vs="/blog/assets/dbedc79b5e01407da4d4d0903ff36d9e-62b33c94.webp",js="/blog/assets/dd458c7dfc7640c6acee1b77b5f279a9-10e13122.webp",zs="/blog/assets/92c3502502d14dd8b8613353f19449bd-314f0572.webp",Ds="/blog/assets/cd1767bc3f374ac6b551df429529f4b5-dfc0291d.webp",Gs="/blog/assets/c762c61569be4a0c9b1607c890f2e4b8-dc48b43a.webp",Hs="/blog/assets/a4689d6840f34818aca143f2cf3c1922-65b5981c.webp",Is="/blog/assets/d592ad2759eb4d85b7629a8cb5e91cd0-744982d3.webp",Ks="/blog/assets/beacbcf830cf418797da5f8d1ab2d274-696d95e5.webp",Ls="/blog/assets/6d45d4e1346c4b1b8e0ce0ebdd34ac78-1d69784a.webp",Ms="/blog/assets/fb27e032955d426d96b97fe5611f4e20-de61348d.webp",Os="/blog/assets/4c92ec1fb004485e9d900e371b6d8b49-8038a007.webp",Qs="/blog/assets/151aad628ab04f74bfdb185afcf3cbab-9a074361.webp",Ws="/blog/assets/5a5285e751b74854815e04d0241cf5ee-2d568661.webp",Xs="/blog/assets/75a37051db5b43279837d43eccda56c9-4f1b897b.webp",Ys="/blog/assets/40be8ad0cbf44b00b98a94e5bd1657f2-08969789.webp",$s="/blog/assets/5b2c1d7805d84ad69f1c02a2e19fbb82-d2712978.webp",sb="/blog/assets/b1b49a47aa9a48c493b550b4e3ba0705-e73935f4.webp",bb="/blog/assets/5af71f04121542c7bc27473ea3f6382b-ada373c0.webp",ab="/blog/assets/f3cebb038f904082a836d37fd55d6eea-75f77faa.webp",eb="/blog/assets/64aac2e36ef146aa825375bbfaf2adfb-240a982e.webp",cb="/blog/assets/78675fd72b0c4f3ba391a6be84a913bb-679a0afb.webp",pb="/blog/assets/76595293865e406ba53e405c4ed00aab-335d6220.webp",tb="/blog/assets/a3bf3d36063a454584d12a9cea42048f-ff0e2979.webp",ob="/blog/assets/351725144ac240f4af100f5d79f85b6e-c3fb7637.webp",lb="/blog/assets/8b1b0aa045db4fccaea1beeaaf877894-bd2a63af.webp",ib="/blog/assets/3794a379e02d4b3d84f9fa7a99fc2df3-d77f9496.webp",fb="/blog/assets/c4aa54f68d274ba1be1e4ec8ce620c4f-4ec59b7b.webp",db="/blog/assets/d38e218d966842afa4f5fdb77dac9698-2564e9b3.webp",rb="/blog/assets/904a4e7ea6074baa8588aa664ed72c83-e6087d06.webp",mb="/blog/assets/e557ee37f3fe48d9a3bd3230b8d9fd34-e46a8017.webp",_b="/blog/assets/3bb45b6241d34308bc207e956e641d0d-36608086.webp",gb="/blog/assets/c204de87249b45c3b6ea0a5b02f6c9d4-075ef8c6.webp",nb="/blog/assets/c83a68d2e2f440cc9e544f9d46f2d660-31984ec8.webp",wb="/blog/assets/58f3f31600e94c8496d50dc739529132-a0f26d05.webp",hb="/blog/assets/86dafe823fa542d49592ccc16ca09d58-7be6cbad.webp",ub="/blog/assets/10c48293b25347978d5bc8ce80085f02-d5b0f617.webp",Cb="/blog/assets/5369bb23cf744296a14401567b1bbbab-fece4e1b.webp",Pb="/blog/assets/5626979ae50e488cb3a3aa5c260e88ab-0a954936.webp",Ub="/blog/assets/ffe92fc7c040475b8bd6043b1c0cc339-95b46c55.webp",kb="/blog/assets/d12b26b3bf6b4e25bcadee4b228ecfcb-dec2a069.webp",qb="/blog/assets/477bb72b2ebf4e6f8038ae2616f98b95-bf796b4e.webp",Bb={class:"markdown-body"},xb="2025-07-01T00:00:00.000Z",Fb="2025-07-30T00:00:00.000Z",Rb="考研复习",vb="操作系统",Ab={__name:"操作系统_2",setup(Tb,{expose:b}){return b({frontmatter:{date:"2025-07-01T00:00:00.000Z",updated:"2025-07-30T00:00:00.000Z",category:"考研复习",summary:"操作系统"}}),(Sb,s)=>(a(),e("div",Bb,s[0]||(s[0]=[c('<h2>进程与线程</h2><h3>2.1 进程与线程</h3><h4>2.1.1 进程的概念和特征</h4><ul><li>进程的概念</li></ul><p><img src="'+p+'" alt=""> <img src="'+t+'" alt=""></p><ul><li>进程的特征</li></ul><p><img src="'+o+'" alt=""></p><h4>2.1.2 进程的组成</h4><p><img src="'+l+'" alt=""></p><p><img src="'+i+'" alt=""></p><p>注 ：PCB是操作系统用的 ，而程序段和数据段都只是程序用的。</p><p><img src="'+f+'" alt=""> <img src="'+d+'" alt=""></p><h4>2.1.3 进程的状态与转换</h4><p><img src="'+r+'" alt=""></p><p><img src="'+m+'" alt=""> <img src="'+_+'" alt=""> <img src="'+g+'" alt=""></p><ul><li>进程的组织 （可能是一个被删掉的考点 ）</li></ul><p><img src="'+n+'" alt=""> <img src="'+w+'" alt=""> <img src="'+h+'" alt=""></p><h4>2.1.4 进程控制</h4><p><img src="'+u+'" alt=""></p><ul><li><p>进程的创建</p><p><img src="'+C+'" alt=""></p></li><li><p>进程的终止</p><p><img src="'+P+'" alt=""></p></li><li><p>进程的阻塞和唤醒</p><p><img src="'+U+'" alt=""></p></li><li><p>进程的切换<img src="'+k+'" alt=""></p></li></ul><h4>2.1.5 进程的通信</h4><p><img src="'+q+'" alt=""></p><ol><li><p>共享存储</p><p><img src="'+B+'" alt=""></p></li><li><p>消息传递<img src="'+T+'" alt=""></p><ol><li><p>直接通信方式</p><p><img src="'+y+'" alt=""></p></li><li><p>间接通信方式</p><p><img src="'+S+'" alt=""></p></li></ol></li><li><p>管道通信</p><p><img src="'+Z+'" alt=""></p></li></ol><p>注 ：一个管道允许多个写进程 ，一个读进程。</p><h4>2.1.6 线程和多线程模型</h4><p><img src="'+x+'" alt=""></p><p>1、线程的基本概念</p><p><img src="'+F+'" alt=""></p><p>2、线程与进程的比较</p><p><img src="'+R+'" alt=""> <img src="'+v+'" alt=""></p><p>3、线程的属性</p><p><img src="'+A+'" alt=""></p><p>4、线程的状态和转换</p><p><img src="'+E+'" alt=""></p><p>注 ：就和进程一样一样滴。</p><p>5、线程的组织和控制</p><ol><li>线程控制块 ：与进程类似 ，系统也为每个线程配置一个线程控制块TCB ，用于记录控制和管理线程的信息。同一进程中的所有线程都完全共享进程的地址空间和全局变量。各个线程都可以访问进程地址空间的每个单元 ，所以一个线程可以读、写或甚至清除另一个线程的堆栈。线程控制块通常包括 ： <ol><li>线程标识符 ；</li><li>一组寄存器 ，包括程序计数器、状态寄存器和通用寄存器 ；</li><li>线程运行状态 ，用于描述线程正处于何种状态 ；</li><li>优先级 ；</li><li>线程专有存储区 ，线程切换时用于保存现场等 ；</li><li>堆栈指针 ，用于过程调用时保存局部变量及返回地址等。</li></ol></li><li>线程的创建 ：线程也是具有生命期的 ，它由创建而产生 ，由调度而执行 ，由终止而消亡。相应地 ，在操作系统中就有用于创建线程和终止线程的函数 （或系统调用 ）。用户程序启动时 ，通常仅有一个称为初始化线程的线程正在执行 ，其主要功能是用于创建新线程。在创建新线程时 ，需要利用一个线程创建函数 ，并提供相应的参数 ，如指向线程主程序的入口指针、堆栈的大小、线程优先级等。线程创建函数执行完后 ，将返回一个线程标识符。</li><li>线程的终止 ：当一个线程完成自己的任务后 ，或线程在运行中出现异常而要被强制终止时 ，由终止线程调用相应的函数执行终止操作。但是有些线程 （主要是系统线程 ）一旦被建立 ，便一直运行而不会被终止。通常 ，线程被终止后并不立即释放它所占有的资源 ，只有当进程中的其他线程执行了分离函数后 ，被终止线程才与资源分离 ，此时的资源才能被其他线程利用。终止但尚未释放资源的线程仍可被其他线程调用 ，以使被终止线程重新恢复运行。</li></ol><p>6、线程的实现方式</p><p><img src="'+J+'" alt=""></p><p><img src="'+N+'" alt=""></p><p>7、多线程模型</p><p><img src="'+V+'" alt=""> <img src="'+j+'" alt=""></p><p><img src="'+z+'" alt=""></p><h4>2.1.7 本节小结</h4><h5>1 为什么要引入进程 ？</h5><blockquote><p>在多道程序设计的背景下 ，进程之间需要共享系统资源 ，因此会导致各程序在执行过程中出现相互制约的关系 ，程序的执行会表现出间断性等特征。这些特征都是在程序的执行过程中发生的 ，是动态的过程 ，而传统的程序本身是一组指令的集合 ，是静态的概念 ，无法描述程序在内存中的执行情况 ，即无法从程序的字面上看出它何时执行、何时停顿 ，也无法看出它与其他执行程序的关系 ，因此 ，程序这个静态概念已不能如实反映程序并发执行过程的特征。为了深刻描述程序动态执行过程的性质乃至更好地支持和管理多道程序的并发执行 ，便引入了进程的概念。</p></blockquote><h5>2 什么是进程 ？进程由什么组成 ？</h5><blockquote><p>进程是一个具有独立功能的程序关于某个数据集合的一次运行活动。它可以申请和拥有系统资源 ，是一个动态的概念 ，是一个活动的实体。它不只是程序的代码本身 ，还包括当前的活动通过程序计数器的值和处理寄存器的内容来表示。<br> 一个进程实体由程序段、相关数据段和PCB三部分构成 ，其中PCB是标志一个进程存在的唯一标识 ，程序段是进程运行的程序的代码 ，数据段则存储程序运行过程中相关的一些数据。</p></blockquote><h5>3 进程是如何解决问题的 ？</h5><blockquote><p>进程将能够识别程序运行状态的一些变量存放在PCB中 ，通过这些变量系统能够更好地了解进程的状况 ，并在适当时机进行进程的切换 ，以避免一些资源的浪费 ，甚至划分为更小的调度单位一一线程来提高系统的并发度。</p></blockquote><p>本节主要介绍什么是进程 ，并围绕这个问题进行一些闸述和讨论 ，为下一节讨论的内容做铺垫 ，但之前未学过相关课程的读者可能会比较费解 ，到现在为止对进程这个概念还未形成比较清晰的认识。接下来 ，我们再用一个比较熟悉的概念来类比进程 ，以便大家能彻底理解本节的内容到底在讲什么 ，到底解决了什么问题。<br> 我们用“人的生命历程”来类比进程。首先 ，人的生命历程一定是一个动态的、过程性的概念 ，要研究人的生命历程 ，先要介绍经历这个历程的主体是什么。主体当然是人 ，相当于经历进程的主体是进程映像 ，人有自己的身份 ，相当于进程映像里有PCB ；人生历程会经历好几种状态 ；出生的时候、弥留的时候、充满斗志的时候、发奋图强的时候及失落的时候 ，相当于进程有创建、撤销、就绪、运行、阻塞等状态 ，这几种状态会发生改变 ，人会充满斗志而转向发奋图强 ，发奋图强获得进步之后又会充满斗志预备下一次发奋图强 ，或者发奋图强后遇到阻碍会进入失落状态 ，然后在别人的开导之下又重新充满斗志。类比进程 ，会由就绪态转向运行态 ，运行态转向就绪态 ，或者运行态转向阻塞态 ，然后在别的进程帮助下返回就绪态。若我们用“人生历程”这个过程的概念去类比进程 ，则对进程的理解就更深一层。前面生活化的例子可以帮我们理解进程的实质 ，但它毕竞有不严谨的地方。一种较好的方式是 ，在类比进程和人生历程后 ，再看一遍前面较为严谨的书面述和讨论 ，这样对知识的掌握会更加准确而全面。<br> 这里再给出一些学习计算机科学知识的建议。学习时 ，很多同学会陷入一个误区 ，即只注重对定理、公式的应用 ，而忽视对基础概念的理解。这是我们从小到大应付考试而培养出的一个毛病 ，因为熟练应用公式和定理对考试有立见影的效果。公式、定理的应用固然重要 ，但基础概念的理解能让我们透彻地理解一门学科 ，更利于我们产生兴趣 ，培养创造性思维。</p><h3>2.2 CPU调度</h3><h4>2.2.1 调度的概念</h4><p><img src="'+D+'" alt=""></p><p>1、调度的基本概念</p><p>在多道程序系统中 ，进程的数量往往多于CPU的个数 ，因此进程争用CPU的情况在所难免。CPU调度是对CPU进行分配 ，即从就绪队列中按照一定的算法 （公平、高效的原则 ）选择一个进程并将CPU分配给它运行 ，以实现进程并发地执行。<br> CPU调度是多道程序操作系统的基础 ，是操作系统设计的核心问题。</p><p>2、调度的层次</p><p><img src="'+G+'" alt=""> <img src="'+H+'" alt=""> <img src="'+I+'" alt=""></p><p>3、三级调度的联系</p><p><img src="'+K+'" alt=""></p><h4>2.2.2 调度的实现</h4><p>1、调度程序 （调度器 ）</p><p><img src="'+L+'" alt=""> <img src="'+M+'" alt=""></p><p>2、调度的时机、切换和过程</p><p><img src="'+O+'" alt=""> <img src="'+Q+'" alt=""></p><p><img src="'+W+'" alt=""></p><p>3、进程调度的方式</p><p><img src="'+X+'" alt=""></p><p>4、闲逛进程</p><p><img src="'+Y+'" alt=""></p><p>5、两种线程的调度</p><h4>2.2.3 调度的目标</h4><p><img src="'+$+'" alt=""></p><h4>2.2.4 进程切换</h4><h4>2.2.5 典型的调度算法</h4><p><img src="'+ss+'" alt=""> <img src="'+bs+'" alt=""></p><h5>1 先来先服务 （FCFS ）算法</h5><p><img src="'+as+'" alt=""> <img src="'+es+'" alt=""></p><h5>2 短作业优先 （SJF ）算法</h5><p><img src="'+cs+'" alt=""> <img src="'+ps+'" alt=""> <img src="'+ts+'" alt=""> <img src="'+os+'" alt=""></p><h5>3 高响应比优先调度算法</h5><p><img src="'+ls+'" alt=""> <img src="'+is+'" alt=""></p><h5>4 优先级调度算法</h5><p><img src="'+fs+'" alt=""></p><p><img src="'+ds+'" alt=""> <img src="'+rs+'" alt=""> <img src="'+ms+'" alt=""></p><h5>5 时间片轮转 （RR ）调度算法</h5><p><img src="'+_s+'" alt=""> <img src="'+gs+'" alt=""> <img src="'+ns+'" alt=""></p><h5>6 多级队列调度算法</h5><p><img src="'+ws+'" alt=""></p><h5>7 多级反馈队列调度算法</h5><p><img src="'+hs+'" alt=""> <img src="'+us+'" alt=""></p><h4>2.2.6 本节小结</h4><h5>1 为什么要进行CPU调度 ？</h5><blockquote><p>若没有CPU调度 ，则意味着要等到当前运行的进程执行完毕后 ，下一个进程才能执行 ，而实际情况中 ，进程时常需要等待一些外部设备的输入 ，而外部设备的速度与CPU相比是非常缓慢的 ，若让CPU总是等待外部设备 ，则对CPU的资源是极大的浪费。而引进CPU调度后 ，可在运行进程等待外部设备时 ，将CPU调度给其他进程 ，从而提高CPU的利用率。用一句简单的话说 ，就是为了合理地处理计算机的软/硬件资源。</p></blockquote><h5>2 调度算法有哪几种 ？</h5><blockquote><p>本节介绍的调度算法有先来先服务调度、短作业优先调度、优先级调度、高响应比优先调度、时间片轮转调度、多级队列调度、多级反馈队列调度 7种。 先来先服务算法和短作业优先算法无法保证及时地接收和处理问题 ，因此无法保证在规定的时间间隔内响应每个用户的需求 ，也同样无法达到实时操作系统的及时性需求。优先级调度算法按照任务的优先级进行调度 ，对于更紧急的任务给予更高的优先级 ，适合实时操作系统。 高响应比优先调度算法、时间片轮转调度算法、多级反馈队列调度算法都能保证每个任务在一定时间内分配到时间片 ，并轮流占用CPU ，适合分时操作系统。</p></blockquote><p>本节主要介绍了CPU调度的概念。操作系统主要管理CPU、内存、文件、设备几种资源只要对资源的请求大于资源本身的数量 ，就会涉及调度。例如 ，在单处理器系统中 ，CPU只有一个 ，而请求的进程却有多个 ，因此就需要CPU调度。出现调度的概念后 ，又有了一个问题 ，即如何调度、应该满足谁、应该让谁等待 ，这是调度算法所面对的问题 ；而应该满足谁、应该让谁等待 ，要遵循一定的准则。调度这一概念贯穿于操作系统的始终 ，读者在接下来的学习中 ，将接触到几种资源的调度问题。将它们与CPU调度的内容相对比 ，将发现有异曲同工之妙。</p><h3>2.3 同步与互斥</h3><h4>2.3.1 同步与互斥的基本概念</h4><p><img src="'+Cs+'" alt=""></p><ul><li>临界资源和互斥</li></ul><p><img src="'+Ps+'" alt=""> <img src="'+Us+'" alt=""></p><ul><li>实现临界区互斥必须遵循的准则</li></ul><p><img src="'+ks+'" alt=""></p><ul><li>同步</li></ul><p><img src="'+qs+'" alt=""></p><h4>2.3.2 实现临界区互斥的基本方法</h4><p><img src="'+Bs+'" alt=""> <img src="'+Ts+'" alt=""></p><ol><li>软件实现方法 <ol><li><p>单标志法</p><p><img src="'+ys+'" alt=""><br> 注 ：违背了“空闲让进”准则 （两个进程必须交替进入临界区 ）</p></li><li><p>双标志先检查法</p><p><img src="'+Ss+'" alt=""></p></li><li><p>双标志后检查法</p><p><img src="'+Zs+'" alt=""><br> 注 ：违背了“空闲让进 ”准则 ，且因此会导致“饥饿”现象 （违背了“有限等待”准则 ）</p></li><li><p>Peterson算法</p><p><img src="'+xs+'" alt=""><br> 注 ：很好的遵守了其他三个准则 ，但是还是违背了“让权等待”</p></li></ol></li><li>硬件实现方法 <ol><li><p>中断屏蔽方法</p><p><img src="'+Fs+'" alt=""></p></li><li><p>硬件指令方法——TestAndSet方法</p><p><img src="'+Rs+'" alt=""><br> 注 ：违背了“让权等待”</p></li><li><p>硬件指令方法——Swap方法</p><p><img src="'+vs+'" alt=""></p></li></ol></li></ol><h4>2.3.3 互斥锁</h4><p><img src="'+As+'" alt=""></p><h4>2.3.4 信号量</h4><p><img src="'+Es+'" alt=""> <img src="'+Js+'" alt=""></p><p><img src="'+Ns+'" alt=""></p><ul><li><p>整型信号量</p><p><img src="'+Vs+'" alt=""></p></li><li><p>记录型信号量</p><p><img src="'+js+'" alt=""> <img src="'+zs+'" alt=""> <img src="'+Ds+'" alt=""></p></li><li><p>利用信号量实现进程互斥</p><p><img src="'+Gs+'" alt=""></p></li><li><p>利用信号量实现同步</p><p><img src="'+Hs+'" alt=""></p></li><li><p>利用信号量实现前驱关系 （多级同步 ）</p><p><img src="'+Is+'" alt=""></p></li></ul><h4>2.3.5 经典同步问题</h4><h5>1 生产者-消费者问题</h5><ol><li><p>单消费者单生产者</p><p><img src="'+Ks+'" alt=""> <img src="'+Ls+'" alt=""> <img src="'+Ms+'" alt=""><br> 注 ：一定得是先同步后互斥 ，否则将造成死锁。<br><img src="'+Os+'" alt=""></p></li><li><p>多消费者多生产者</p><p><img src="'+Qs+'" alt=""><br> 注 ：该结论不适用于多个盘子也就是盘子容量不唯一的情况哦。</p></li></ol><h5>2 读者-写者问题</h5><p><img src="'+Ws+'" alt=""></p><p><img src="'+Xs+'" alt=""> <img src="'+Ys+'" alt=""></p><h5>3 哲学家进餐问题</h5><p><img src="'+$s+'" alt=""></p><h5>4 吸烟者问题</h5><p><img src="'+sb+'" alt=""> <img src="'+bb+'" alt=""> <img src="'+ab+'" alt=""></p><h4>2.3.6 管程</h4><p><img src="'+eb+'" alt=""></p><p><img src="'+cb+'" alt=""></p><p><img src="'+pb+'" alt=""> <img src="'+tb+'" alt=""></p><h4>2.3.7 本节小结</h4><p>1 ）为什么要引入进程同步的概念 ？</p><p>在多道程序共同执行的条件下 ，进程与进程是并发执行的 ，不同进程之间存在不同的相互制约关系。为了协调进程之间的相互制约关系 ，引入了进程同步的概念。</p><p>2 ）不同的进程之间会存在什么关系 ？</p><p>进程之间存在同步与互的制约关系<br> 同步是指为完成某种任务而建立的两个或多个进程 ，这些进程因为需要在某些位置上协调它们的工作次序而等待、传递信息所产生的制约关系<br> 互斥是指当一个进程进入临界区使用临界资源时 ，另一个进程必须等待 ，当占用临界资源的进程退出临界区后 ，另一进程才允许去访问此临界资源。</p><p>3 ）当单纯用本节介绍的方法解决这些问题时会遇到什么新的问题吗 ？</p><p>当两个或两个以上的进程在执行过程中 ，因占有一些资源而又需要对方的资源时 ，会因为争夺资源而造成一种互相等待的现象 ，若无外力作用 ，它们都将无法推进下去。这种现象称为死锁。</p><h3>2.4 死锁</h3><h4>2.4.1 死锁的概念</h4><p><img src="'+ob+'" alt=""></p><ul><li>死锁、饥饿和死循环的共同点和区别</li></ul><p><img src="'+lb+'" alt=""></p><ul><li>死锁产生的必要条件</li></ul><p><img src="'+ib+'" alt=""></p><ul><li>什么时候会发生死锁</li></ul><p><img src="'+fb+'" alt=""></p><ul><li>死锁的处理机制</li></ul><p><img src="'+db+'" alt=""></p><h4>2.4.2 死锁预防</h4><p><img src="'+rb+'" alt=""></p><ol><li><p>破环互斥条件</p><p><img src="'+mb+'" alt=""></p></li><li><p>破坏不可剥夺条件</p><p><img src="'+_b+'" alt=""></p></li><li><p>破坏请求并保持条件</p><p><img src="'+gb+'" alt=""></p></li><li><p>破环循环等待条件</p><p><img src="'+nb+'" alt=""></p></li></ol><h4>2.4.3 死锁避免</h4><p><img src="'+wb+'" alt=""></p><p><img src="'+hb+'" alt=""> <img src="'+ub+'" alt=""> <img src="'+Cb+'" alt=""> <img src="'+Pb+'" alt=""></p><h4>2.4.4 死锁检测和解除</h4><ul><li><p>死锁检测</p><p><img src="'+Ub+'" alt=""> <img src="'+kb+'" alt=""></p></li><li><p>死锁解除</p><p><img src="'+qb+'" alt=""></p></li></ul><h4>2.4.5 本节小结</h4><p>1 ）为什么会产生死锁 ？产生死锁有什么条件 ？</p><p>由于系统中存在一些不可剥夺资源 ，当两个或两个以上的进程占有自身的资源并请求对方的资源时 ，会导致每个进程都无法向前推进 ，这就是死锁。死锁产生的必要条件有4个 ，分别是互条件、不剥夺条件、请求并保持条件和循环等待条件 互斥条件是指进程要求分配的资源是排他性的 ，即最多只能同时供一个进程使用。 不剥夺条件是指进程在使用完资源之前 ，资源不能被强制夺走。 请求并保持条件是指进程占有自身本来拥有的资源并要求其他资源 循环等待条件是指存在一种进程资源的循环等待链。</p><p>2 ）有什么办法可以解决死锁问题 ？</p><p>死锁的处理策略可以分为预防死锁、避免死锁及死锁的检测与解除</p><ul><li>死锁预防是指通过设立一些限制条件 ，破坏死锁的一些必要条件 ，让死锁无法发生。</li><li>死锁避免指在动态分配资源的过程中 ，用一些算法防止系统进入不安全状态 ，从而避免死锁。</li><li>死锁的检测和解除是指在死锁产生前不采取任何措施 ，只检测当前系统有没有发生死锁 ，若有 ，则采取一些措施解除死锁。</li></ul><h3>2.5 本章疑难点</h3><h4>1 进程与程序的区别与联系</h4><blockquote><p>1 ）进程是程序及其数据在计算机上的一次运行活动 ，是一个动态的概念。进程的运行实体是程序 ，离开程序的进程没有存在的意义。从静态角度看 ，进程是由程序、数据和进程控制块 （PCB ）三部分组成的。而程序是一组有序的指令集合 ，是一种静态的概念。</p><p>2 ）进程是程序的一次执行过程 ，它是动态地创建和消亡的 ，具有一定的生命周期 ，是暂时存在的 ：而程序则是一组代码的集合 ，是永久存在的 ，可长期保存。 3 ）一个进程可以执行一个或几个程序 ，一个程序也可构成多个进程。进程可创建进程 ，而程序不可能形成新的程序。 4 ）进程与程序的组成不同。进程的组成包括程序、数据和PCB</p></blockquote><h4>2 银行家算法的工作原理</h4><blockquote><p>银行家算法的主要思想是避免系统进入不安全状态。在每次进行资源分配时 ，它首先检查系统是否有足够的资源满足要求 ，若有则先进行试分配 ，并对分配后的新状态进行安全性检查。若新状态安全 ，则正式分配上述资源 ，否则拒绝分配上述资源。这样 ，它保证系统始终处于安全状态 ，从而避免了死锁现象的发生。</p></blockquote><h4>3 进程同步、互斥的区别和联系</h4><blockquote><p>并发进程的执行会产生相互制约的关系 ：一种是进程之间竞争使用临界资源 ，只能让它们逐个使用 ，这种现象称为互斤 ，是一种竞争关系 ：另一种是进程之间协同完成任务 ，在关键点上等待另一个进程发来的消息 ，以便协同一致 ，是一种协作关系。</p></blockquote>',168)])))}};export{Rb as category,xb as date,Ab as default,vb as summary,Fb as updated};
