const n=`---
date: 2025-06-10
updated: 2025-06-13
category: 2025spring
summary: 软件质量管理复习
---
## Scrum

### 1.结构

![scrum-framework](./../../public/assets/scrum-framework.png)

### 2.    “33355”

- 三大支柱：

> 透明：过程与工作成果对团队和利益相关者可见
>
> 检视：定期审查进展，识别偏差（通过5大事件实现
>
> 适应：根据检视结果进行调整、优化过程和产品方向

- 五个价值：

> 承诺
>
> 专注
>
> 开放
>
> 尊重
>
> 勇气

- 三个角色：

> PO：负责最大化产品价值和开发团队的工作价值，管理产品Backlog
>
> Scrum Master:按照Scrum 指南的规则建立Scrum ，服务Scrum Team、PO、组织;确保框架实施，移除障碍
>
> 开发人员:跨职能开发，交付可用增量

- 三个工件：

> 产品Backlog、Sprint Backlog、增量

- 五个事件

> Sprint :固定周期（≤1个月），不可变更目标与质
>
> Sprint 每日计划
>
> 每日Scrum 会议:  15分钟每日站会，调整当日计划
>
> Sprint 评审会议:  展示增量，调整Backlog
>
> Sprint 回顾会议:  改进流程与效能

### 3.需求——用户故事模板

> 作为 < >			——用户画像
>
> 我想 < >			——预期功能
>
> 从而 < >			——为什么用户想要这个功能

### 4.Ron Jeffries 的 3C 原则

> 卡片：在一堆卡片上写下期望的软件特性
>
> 交谈：聚在一起对要开发的软件进行深入讨论
>
> 确认：对完工条件进行确认

- DOD （完成的定义）   ——Definition of Done
- BDD    (行为驱动开发)  ——Behavior-Driven Development
  - 核心思想是通过定义软件的行为来驱动开发过程
  - 重点是增强团队对需求的理解，并确保开发的软件满足业务目标
  - 强调在开发开始之前，用自然语言描述软件应如何行为

### 5. 用户故事 INVEST原则

> 独立性
>
> 可协商性
>
> 有价值
>
> 可以估算性
>
> 短小
>
> 可测试性
>
> 每个用户故事都有应该像标准的快递箱——独立封装、地址清晰、体积适中、明确、可追踪、允许改派等

### 6. 用户故事SMART原则

> S——Specific(具体)
>
> M——Measurable(可衡量)：用户故事的结果必须能用明确的指标或验收标准验证
>
> A——Achievable(可实现)
>
> R——Relevant(相关性)：用户故事与当前项目或者用户需求相关
>
> T——Time-bound(有时限)：明确截至时间或者优先级

### 7.产品Backlog

- 产品 Backlog 是Scrum 的核心，按照重要性排序的需求或者故事的分列表

<img src="./../../public/assets/P-backlog.png" alt="P-backlog" style="zoom:75%;" />

### 8.Product Backlog（动态需求池）

> 是一份涌现的和有序的清单，它列出了改进产品所需的内容。它是 Scrum Team 所承担工作的唯一来源。

### 9.用户故事地图

### 10.Sprint

- 是 Scrum 的核心，在这里创意（idea）转化为价值。
- 固定时长的事件，为期一个月或更短，以保持一致性。前一个 Sprint 结束后，下一个新的Sprint 紧接着立即开始
  - 时间短：“敏捷”，短反馈周期=频繁交付=频繁客户反馈=错误方向=持续时间短=学习改进速度快
  - 时间长：更多时间作充分准备、解决问题、达成目标，不会被接二连三的会议压的不堪重负
  - 当前，Scrum 周期通常为2个星期
- Sprint计划会议目标

> sprint目标、团队成员名单、Sprint backlog、确定好sprint演示日期、确定好时间地点,供举行每日scrum会议

### 11.估算

<img src="./../../public/assets/estimate.png" alt="estimate" style="zoom:30%;" />

> 据收益递减原理，不应在估算上花太多的时间。可以做出一个快速但不那么准确的估计，也可以再多花一点时间做一个更准确的估计

#### 估算单位(story point)

- 计划扑克
- 卡片队列估算法

#### 故事与任务

Story是可以交付的东西，Task是不可以交付的，Product Owner对Task不关心

| **Scrum工件** | **定义**                    | **对应的承诺**           |
| ------------------- | --------------------------------- | ------------------------------ |
| Product Backlog     | 产品需求动态清单                  | Product Goal（产品愿景）       |
| Sprint Backlog      | Sprint任务计划（目标+选定的条目） | Sprint Goal（迭代目标）        |
| Increment           | 符合完成标准的可交付成果          | Definition of Done（完成标准） |

### 12.燃尽图

<img src="./../../public/assets/燃尽图.png" alt="燃尽图" style="zoom:50%;" />

<img src="./../../public/assets/燃尽图2.png" alt="燃尽图2" style="zoom:75%;" />

### 13.Scrum 优势与局限

> 轻量灵活：仅定义必要规则，兼容多种实践
>
> 持续改进：通过事件循环实现经验反馈
>
> 价值驱动：以Product Goal为导向，确保交付有效性
>
> 协作透明：跨角色协作，信息共享最大化

> 没有技术实践
>
> 可以使用极限编程技术实践：测试驱动开发、简单设计、重构、持续集成等等

## XP

> Extreme Programming  这一名称体现了其核心理念：把有益的实践做到极致



### 1.XP的核心——开发阶段

> 编写代码、运行所有测试用例、迭代测试用例和代码、如果需要，进行重构、集成（包括测试）

**说明**：

- 结对编程
- 测试驱动
- 让测试用例运行起来、为系统的分析、设计、实现和测试增加价值
- 开发后立即进行集成，包括集成测试





### 2.变更成本曲线



<img src="./../../public/assets/change_cost.png" alt="change_cost" style="zoom:75%;" />



**降低变更成本的技术**

- OOP
- 自动化测试
- 重构技术
- CICD：鼓励频繁交付和持续部署
- Beck的曲线并非无视规律，只是把反馈周期从几个月缩短到几分钟，结果就没有机会让成本成指数增长
- 平坦曲线的前提是严格执行XP实践

**目标**

![XP_cost](./../../public/assets/XP_cost.png)





### 3.价值观

#### 交流

>开发者  –  开发者
>
>开发者 – 客户
>
>开发则 – 管理层

XP强制要求的沟通方式

> 单元测试、结对编程、任务估算

#### 简单

#### 反馈

- 即使反馈
    - 程序员：单元测试
    - 客户：实时估算
    - 团队：进度跟踪反馈
- 中长期反馈
    - 客户：功能测试
    - 运行软件测试

#### 勇气

以前三个价值观支持



### 4.软件开发的基本内容

<img src="./../../public/assets/coding.png" alt="coding" style="zoom:30%;" />



#### 测试

- 长期来看：测试被运行和维护的前提，让程序运行寿命更长
- 短期来看：信心
- 类型
    - 单元测试
    - 客户编写的功能测试？？？？

#### 倾听

> 程序员与业务人员交流、相互之间
>
> 业务人员说明项目的需求、程序员帮助业务人员了解哪些容易、哪些困难

#### 设计

>低耦合：良好的设计会组织逻辑，以便系统的一部分发生变化并不总是需要系统的另一部分发生变化。
>
>封装：良好的设计将逻辑放在它所操作的数据附近。
>
>可扩展性：良好的设计允许系统扩展，且仅在一个地方进行更改。



### 5.基本实践

#### 5.1 计划游戏

#### 5.2 小发布

#### 5.3 隐喻

#### 5.4 简单设计

#### 5.5 测试TDD

#### 5.6 重构 Refactoring

#### 5.7 结对编程

#### 5.8 代码集体拥有制 

#### 5.9 CICD

#### 5.10 40小时工作制

#### 5.11 现场客户

#### 5.12 编码标准

#### XP做法可行性



### 6.TDD

**测试**

>1. 测试是独立且自动的
>
>2. 测试应当有价值

#### 6.1 程序员测试

#### 6.2 客户测试

#### 6.3 其他测试

> 并行测试：新系统的运行与旧系统完全一致
>
> 压力测试：模拟可能出现的最恶劣负载情况的测试
>
> 随机测试：确保系统自面对无意义输入时能合理响应的测试

#### 6.4 TDD

**先写测试再写实现**

> 三阶段循环： 红（失败测试） –>  绿（通过实现） –>  重构（优化代码）

**目标**：创建可测试、可维护、最小化的代码

**标准流程**

> 1. 编写失败测试
> 2. 快速实现通过
> 3. 逐步泛化
> 4. 持续重构

**核心价值**

> 缺陷预防、设计引导、降低耦合、活的文档



### 7. 简单设计的四大准则

> 通过所有测试、消除重复、清晰表达意图、最小化元素数量

**YAGNI**原则的经济学

![yagni](./../../public/assets/yagni.png)

**边际成本陷阱**

> 假设开发某功能的当前成本为 $C $
>
> 若提前$N$个周期开发： 总成本 = $ C × (1 + 维护率)^N $
>
> 而实际需求出现时的成本可能仅为$C×0.7$（技术演进）

**重构的纪律性**

> 技术 ： 提升可读性、降低维护成本、支持演化式设计

> 工具 ： IDE自动化重构、测试框架、代码质量扫描

- 重构不是推到重写，而是让代码随时间越变越优雅的持续艺术

#### XP设计

> 降低流程中的不可逆性来应对复杂性
>
> 持续保持代码清晰简洁的渴望
>
> 通过重构自信改进代码的能力
>
> 精通模式：不仅理解解决方案，更懂应用时机与演进路径
>
> 预见变化的眼光：知晓今日决策终将改变
>
> 运用代码、图表及最重要的——对话，向相关人员传达设计





### 8.持续集成

> 持续集成 (Continuous Integration, CI) 是一种软件开发实践，团队成员频繁地（通常每天至少一次）将代码更改集成到共享的代码库主线中。

#### 8.1 传统集成的特点

- 一个开发者可能对代码库的某个部分做了修改，而另一个开发者基于旧版本的代码进行了开发。
- 当这些更改最终汇合时，可能会出现微妙且难以调试的错误。
- 开发者：导致尽量减少与其他部分的交互，但这往往会导致技术债的积累和代码质量的下降。
- 代码质量和重构
    - 开发者可能会避免进行重要的代码重构
    - 意识到代码结构存在问题，或者需要清理重复代码，他们也可能因为担心引入集成冲突而选择维持现状
    - 重构的回避，阻止了代码库根据需求变化和经验积累进行健康的演进

#### 8.2 CI 的解决方案

> 核心理念：持续集成旨在消除传统集成的痛苦
>
> 核心思想：让团队成员非常频繁地集成他们的工作，通常是每天多次
>
> 每次集成涉及的代码量都相对较小，从而显著降低了合并冲突的可能性和复杂性
>
> 快速反馈：任何集成引入的问题都能够被自动化构建和测试快速发现
>
> CI 鼓励使用主线开发



#### 8.3 CI 实践示例

- 获取最新代码： 确保本地环境与中央仓库同步是 CI 的基本前提
- 本地构建与开发：本地环境中运行完整的自动化构建脚本，包括编译代码和运行所有的自动化测试
- 集成前检查：推送（Push）之前，必须再次执行 git pull， 将这些最新的更改合并（Merge）到本地工作副本中，合并后我必须再次在本地运行完整的自动化构建。
- 本地构建通过与推送



## Kanban







## DevOps





## 敏捷
`;export{n as default};
