const n=`---
date: 2025-07-01
updated: 2025-07-01
category: 考研复习
summary: 操作系统
---
# 第一章 计算机系统概述



## 1.1 操作系统的基本概念





## 1.2 发展历程





## 1.3 运行的环境



> 特权指令
>
> 非特权指令

### 3.1 内核操作

1. 时钟管理

2. 中断机制

3. 原语
4. 系统控制的数据结构及处理



### 3.2 中断和异常的概念

1. 定义

\`\`\`mermaid
graph LR
    A[中断] --> B[内部异常]
    A --> C[外部中断（硬件）]
    B --> D[故障（Fault）] --> G[软件中断]
    B --> E[自陷（Trap）] --> H[软件中断]
    B --> F[终止（Abort）] --> I[硬件中断]
    C --> J[可屏蔽中断 INTR]
    C --> K[不可屏蔽中断 NMI]
\`\`\`

访管指令 – trap 指令



2. 处理过程

\`\`\`mermaid
flowchart LR
    A[CPU执行用户程序第i条指令] --> B{检测到异常事件\\n或中断请求信号?}
    B -- 是 --> C[打断当前程序]
    C --> D[转至中断/异常处理程序]
    D --> E{问题可解决?}
    E -- 是 --> F[执行中断返回指令]
    F --> G[返回用户程序\\n第i或i+1条指令]
    E -- 否 --> H[终止用户程序]
    B -- 否 --> A

    classDef decision fill:#f8f9fa,stroke:#495057,stroke-width:2px
    classDef process fill:#e9f5ff,stroke:#228be6
    class B,E decision
    class A,C,D,F,G,H proces
\`\`\`



### 3.3 系统调用

1. 按功能分类

> 设备管理
>
> 文件管理
>
> 进程控制
>
> 进程通信
>
> 内存管理

2. 处理过程

<img src="./../../public/assets/系统调用.jpg" alt="系统调用" style="zoom:25%;" />











## 1.4 操作系统结构



### 4.1 分层法

优点：

问题：

### 4.2 模块化



### 4.3 宏内核



### 4.4 微内核



### 4.5 外核





## 1.5 操作系统引导

**1. 激活CPU**

**2. 硬件自检**

**3. 加载带有操作系统的硬盘**

**4. 加载主引导记录 MBR**

**5. 扫描硬盘分区表**

**6. 加载分区引导记录 PBR**

**7. 加载启动管理器**

**8. 加载操作系统**



## 1.6 虚拟机







# 第二章 进程 & 线程

## 2.1 进程

### 1.1 基本概念

>  **目的**： 为允许多个程序并发执行、更好的描述和控制程序的并发执行，实现操作系统的并发性和共享性。

> **PCB （Process Control Block）**: 进程控制块，描述进程的基本情况和运行状态，进而控制和管理进程

> 进程是一个程序及其数据从磁盘加载到内存后，在CPU上的执行过程； **是系统进行资源分配和调度的基本单位**

特征（理解）：动态、并发、独立、异步



### 1.2 进程的组成

#### PCB

> 1. 进程创建时，操作系统为它新建一个PCB，该结构之后常驻内存，任何时刻都可以存取，并在进程结束时删除。 PCB是进程实体的一部分，是进程存在的唯一标志。
>
> 2. 进程执行时，系统通过其 PCB了解进程的现行状态信息，以便操作系统对其进行控制和管理；进程结束时，系统收回其PCB，该进程随之消亡。
>
> 3. 当操作系统希望调度某个进程运行时，要从该进程的PCB中查出其现行状态及优先级；在调度到某个进程后，要根据其PCB中所保存的CPU状态信息，设置该进程恢复运行的现场，并根据其PCB中的程序和数据的内存始址，找到其程序和数据；进程在运行过程中，当需要和与之合作的进程实现同步、通信或访问文件时，也需要访问PCB；当进程由于某种原因此暂停运行时，又需将其断点的 CPU环境保存在PCB中。可见，在进程的整个生命期中，系统总是通过PCB对进程进行控制的，亦即系统唯有通过进程的PCB才能感知到该进程的存在。

**PCB通常包含的内容**

| 进程描述信息    | 进程控制和管理信息 | 资源分配清单 | 处理机相关信息 |
| --------------- | ------------------ | ------------ | -------------- |
| 进程标识符(PID) | 进程当前状态       | 代码段指针   | 通用寄存器值   |
| 用户标识符(UID) | 进程优先级         | 数据段指针   | 地址寄存器值   |
|                 | 代码运行入口地址   | 堆栈段指针   | 控制寄存器值   |
|                 | 程序的外存地址     | 文件描述符   | 标志寄存器值   |
|                 | 进入内存时间       | 键盘         | 状态字         |
|                 | CPU占用时间        | 鼠标         |                |
|                 | 信号量使用         |              |                |

**PCB组织方式**

> 链接
>
> 索引



#### 程序段

#### 数据段

### 1.3 进程的状态与转换



![进程状态](./../../public/assets/进程状态.png)

### 1.4 进程控制

> 操作系统中，一般将进程控制用的程序程称为原语（不允许终端、不允许分割）。

#### 进程的创建 

**进程与子进程的关系和特点（2020）**
允许一个进程创建另一个进程，此时创建者称为父进程，被创建的进程称为子进程。子进程可以继承父进程所拥有的资源。当子进程被撤销时，应将其从父进程那里获得的资源还给父进程。此外，在撤销父进程时，通常也会同时撤销其所有的子进程。

**导致创建进程的操作（2010）**
在操作系统中，**终端用户登录系统、作业调度、系统提供服务、用户程序的应用请求**等都会引起进程的创建。操作系统创建一个新进程的过程如下（创建原语）：

**创建新进程时的操作（2021）**

1. 分配一个唯一的进程标识号，并申请空白PCB（PCB有限）。若PCB申请失败，则创建失败。
2. 为进程分配所需资源（内存、文件、I/O设备、CPU时间等，在PCB中体现）。资源可从操作系统或父进程获得；若资源不足（如内存），进程进入**创建态**等待资源，不立即失败。
3. 初始化PCB：包括
    - 初始化标志信息
    - 初始化CPU状态信息
    - 初始化CPU控制信息
    - 设置进程优先级等
4. **加入就绪队列**：若就绪队列可接纳新进程，则将其插入队列，等待调度运行。                            

#### 进程的终止

**引起进程终止的事件主要有：**
① ​**​正常结束​**​：进程任务完成，准备退出运行。
② ​**​异常结束​**​：进程运行时发生异常事件导致无法继续运行，包括：

> 存储区越界、保护错、非法指令、特权指令错、运行超时、算术运算错、I/O故障

③ ​**​外界干预​**​：进程因外部请求终止，例如：

> 操作员或操作系统干预、父进程请求、父进程终止

**​操作系统终止进程的过程如下（终止原语）：​**​

**1)** 根据被终止进程的标识符，检索出该进程的PCB，从中读出该进程的状态。
​**​2)​**​ 若被终止进程处于运行状态，立即终止该进程的执行，将CPU资源分配给其他进程。
​**​3)​**​ 若该进程还有子孙进程，则通常需将其所有子孙进程终止（​**​注：有些系统无此要求​**​)。
​**​4)​**​ 将该进程所拥有的全部资源，​**​或归还给其父进程​**​，​**​或归还给操作系统​**​。
​**​5)​**​ 将该PCB从所在队列(链表)中删除。

> **级联终止补充说明**
> 有些系统不允许子进程在父进程终止的情况下存在，对于这类系统，若一个进程终止，则它的所有子进程也终止，这种现象称为​**​级联终止​**​。然而，​**​不是所有操作系统都是这么设计的​**​。

#### 进程的阻塞和唤醒

**进程阻塞的事件与时机（2018、2022、2023）**
正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新任务可做等，进程便通过调用阻塞原语（Block），使自己由​**​运行态​**​变为​**​阻塞态​**​。可见，阻塞是进程自身的一种​**​主动行为​**​，也因此只有处于​**​运行态​**​的进程（获得CPU），才可能将其转为阻塞态。
​**​阻塞原语的执行过程如下​**:

1. 找到将要被阻塞进程的标识号（PID）对应的PCB。
2. 若该进程为运行态，则保护其现场，将其状态转为阻塞态，停止运行。
3. 将该PCB插入相应事件的等待队列，将CPU资源调度给其他就绪进程。

**进程唤醒的事件与时机（2014、2019）**
当被阻塞进程所期待的事件出现时，如它所期待的I/O操作已完成或其所期待的数据已到达，由有关进程（例如：释放该I/O设备的进程，或提供数据的进程）调用唤醒原语（Wakeup），将等待该事件的进程唤醒。
​**​唤醒原语的执行过程如下​**:

1. 在该事件的等待队列中找到相应进程的PCB。
2. 将其从等待队列中移出，并置其状态为**就绪态**。
3. 将该PCB插入就绪队列，等待调度程序调度。

> **​Block原语和Wakeup原语是一对作用刚好相反的原语，必须成对使用​**​。
>
> - 若在某个进程中调用了Block原语，则必须在**与之合作的进程**或**其他相关进程**中安排对应的Wakeup原语；
> - 否则，被阻塞进程将永久处于阻塞态。

### 1.5 进程的通信

#### 共享存储



#### 消息传递



#### 管道通信

​	管道是一个特殊的共享文件，又称pipe文件，数据在管道中是先进先出的。管道通信允许两个进程按生产者-消费者方式进行通信(见图2.4)，只要管道不满，写进程就能向管道的一端写入数据；只要管道非空，读进程就能从管道的一端读出数据。为了协调双方的通信，管道机制必须提供三方面的协调能力：①互斥，指当一个进程对管道进行读/写操作时，其他进程必须等待。②同步，指写进程向管道写入一定数量的数据后，写进程阻塞，直到读进程取走数据后再将它唤醒；读进程将管道中的数据取空后，读进程阻塞，直到写进程将数据写入管道后才将其唤醒。③确定对方的存在。



在Linux中，管道是一种使用非常频繁的通信机制。从本质上说，管道也是一种文件，但它又和一般的文件有所不同，管道可以克服使用文件进行通信的两个问题，具体表现如下：
1)限制管道的大小。管道文件是一个固定大小的缓冲区，在Linux中该缓冲区的大小为4KB，这使得它的大小不像普通文件那样不加检验地增长。使用单个固定缓冲区也会带来问题，比如在写管道时可能变满，这种情况发生时，随后对管道的write()调用将默认地被阻塞，等待某些数据被读取，以便腾出足够的空间供write()调用。
2)读进程也可能工作得比写进程快。当管道内的数据已被读取时，管道变空。当这种情况发生时，一个随后的read()调用将被阻塞，等待某些数据的写入。
管道只能由创建进程所访问，当父进程创建一个管道后，由于管道是一种特殊文件，子进程会继承父进程的打开文件，因此子进程也继承父进程的管道，并可用它来与父进程进行通信。

**注意**
从管道读数据是一次性操作，数据一旦被读取，就释放空间以便写更多数据。普通管道只允许单向通信，若要实现两个进程双向通信，则需要定义两个管道。



#### 信号





## 2.2 线程

### 2.1 基本概念

> 线程是进程中的实体，是被系统独立调度和分派的基本单位

引入进程的目的是更好地使多道程序并发执行，提高资源利用率和系统吞吐量；

而引入线程(Threads)的目的则是**减小程序在并发执行时所付出的时空开销，提高操作系统的并发性能**。



线程由**线程ID、程序计数器、寄存器集合和堆栈**组成。线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。



**线程 & 进程**

> 

### 2.2 线程的状态

> **执行态**：线程已获得CPU而正在运行。
> **就绪态**：线程已具备各种执行条件，只需再获得CPU便可立即执行。
> **阻塞态**：线程在执行中因某事件受阻而处于暂停状态。

### 2.3 线程的组织与控制

1）

> **TCB （Thread Control Block）：**
>
> ① **线程标识符**；
> ② **一组寄存器**：包括程序计数器、状态寄存器和通用寄存器；
> ③ **线程运行状态**：用于描述线程正处于何种状态；
> ④ **优先级**：
> ⑤ **线程专有存储区**：线程切换时用于保存现场等；
> ⑥ **堆栈指针**：用于过程调用时保存局部变量及返回地址等。

2）线程的创建



线程也是具有生命期的，它由创建而产生，由调度而执行，由终止而消亡。相应地，在操作系统中就有用于创建线程和终止线程的函数（或系统调用）。

用户程序启动时，通常仅有一个称为**初始化线程**的线程正在执行，其主要功能是用于创建新线程。在创建新线程时，需要利用一个线程创建函数，并提供相应的参数，如：指向线程主程序的入口指针；堆栈的大小；线程优先级等。

线程创建函数执行完后，将**返回一个线程标识符**。



3）线程的终止



当一个线程完成自己的任务后，或线程在运行中出现异常而要被强制终止时，由终止线程调用相应的函数执行终止操作。但是有些线程（主要是系统线程）一旦被建立，便一直运行而不会被终止。

通常，线程被终止后并不立即释放它所占有的资源，只有当进程中的其他线程执行了**分离函数**后，被终止线程才与资源分离，此时的资源才能被其他线程利用。

被终止但尚未释放资源的线程仍可被其他线程调用，以使被终止线程重新恢复运行。



### 2.4 线程的实现方式

![线程实现方式](./../../public/assets/线程实现方式.png)

#### 用户级线程ULT

> 所有操作都在用户态执行，无需操作系统干预，内核意识不到线程的存在

**优点：**

> ① 线程切换不需要转换到内核空间，节省了模式切换的开销。
> ② 调度算法可以是进程专用的，不同的进程可根据自身的需要，对自己的线程选择不同的调度算法。
> ③ 用户级线程的实现与操作系统平台无关，对线程管理的代码是属于用户程序的一部分。

**缺点：**

> ① 系统调用的阻塞问题，当线程执行一个系统调用时，不仅该线程被阻塞，而且进程内的所有线程都被阻塞。
> ② 不能发挥多CPU的优势，内核每次分配给一个进程的仅有一个CPU，因此进程中仅有一个线程能执行。



#### 内核级线程KLT

操作系统也为每个内核级线程设置一个线程控制块TCB，内核根据该控制块感知某线程的存在

**优点：**

> ① 能发挥多CPU的优势，内核能同时调度同一进程中的多个线程并行执行。
> ② 如果进程中的一个线程被阻塞，内核可以调度该进程中的其他线程占用CPU，也可运行其他进程中的线程。
> ③ 内核支持线程具有很小的数据结构和堆栈，线程切换比较快、开销小。
> ④ 内核本身也可采用多线程技术，可以提高系统的执行速度和效率。

**缺点**

> 同一进程中的线程切换，需要从用户态转到核心态进行，系统开销较大。这是因为用户进程的线程在用户态运行，而线程调度和管理是在内核实现的。



#### 组合方式

### 2.5 多线程模型

![线程-内核](./../../public/assets/线程-内核.png)





## 2.3 CPU调度





## 2.4 同步与互斥





## 2.5 死锁



# 第三章 内存管理

## 3.1 内存管理



## 3.2 虚拟内存管理







# 第四章 文件管理



# 第五章 输入输出





`;export{n as default};
