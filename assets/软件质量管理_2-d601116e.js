import{o,c as p,a as e}from"./index-2cd69f56.js";const r="/blog/assets/line1-6a7c0d8a.png",s="/blog/assets/广义软件过程-6fa9e241.png",i="/blog/assets/软件过程管理-0f665b84.png",n="/blog/assets/waterFall-ae70731a.png",g="/blog/assets/weaterfall3-23d1011d.png",c="/blog/assets/maturity-1c4fab6c.png",u="/blog/assets/pdca-f3fa029d.png",d="/blog/assets/ideal-9811e55e.png",h="/blog/assets/line2-cb43a750.png",a="/blog/assets/motivator-33631992.png",b="/blog/assets/tsp-c9f6f7ee.png",k="/blog/assets/tsp-launch-31d02961.png",q="/blog/assets/probe-a069c5ba.png",m="/blog/assets/wbs-73bf7432.png",_="/blog/assets/genpic-5a41cb59.png",S="/blog/assets/evm-8c373250.png",y="/blog/assets/evm_2-28a5e466.png",T="/blog/assets/line3-ea7d13d1.png",f="/blog/assets/yield-bd376db2.png",x="/blog/assets/afr-3e81ca4c.png",M="/blog/assets/PQI-15b88421.png",P="/blog/assets/design-1fecb02f.png",C={class:"markdown-body"},I="2025-06-10T00:00:00.000Z",F="2025-06-17T00:00:00.000Z",L="2025spring",R="软件质量管理复习",w={__name:"软件质量管理_2",setup(V,{expose:l}){return l({frontmatter:{date:"2025-06-10T00:00:00.000Z",updated:"2025-06-17T00:00:00.000Z",category:"2025spring",summary:"软件质量管理复习"}}),(v,t)=>(o(),p("div",C,t[0]||(t[0]=[e('<p><img src="'+r+'" alt="line1"></p><h2>软件管理</h2><hr><h3>1. 软件的重要性与挑战</h3><blockquote><p>本质困难与挑战：复杂性、不可见性、可变性、一致性</p></blockquote><h4>软件危机</h4><ul><li><strong>落后的软件生产方式无法满足迅速增长的计算机软件需求</strong>，从而导致软件开发与维护过程中出现一系列严重问题的现象。</li></ul><hr><h3>2. 软件工程的定义与目标</h3><blockquote><p>软件工程——研究用<strong>工程化方法</strong>构建和维护有效的、实用的和高质量的软件的学科。</p></blockquote><h4>两大视角</h4><ul><li>管理视角——能否复制成功？</li><li>技术视角——是否可以将问题解决得更好？</li></ul><hr><h3>3. 软件项目管理</h3><blockquote><p>应用方法、工具、技术以及人员能力来完成软件项目，实现项目目标的过程。</p></blockquote><h4>三大关键要素</h4><ul><li>目标</li><li>状态</li><li>纠偏</li></ul><h4>三大目标</h4><ul><li>成本</li><li>质量</li><li>工期</li></ul><blockquote><p>活动：估算、计划、跟踪、风险管理、范围管理、人员管理、沟通管理等 (参考PMBOK)。</p></blockquote><p><strong>广义软件过程</strong></p><p><img src="'+s+'" alt="广义软件过程"></p><hr><h3>4. 软件过程管理</h3><blockquote><p>对象是软件过程</p><p>目的是为了让软件过程在开发效率、质量等方面有着更好性能绩效（performance）</p></blockquote><p><img src="'+i+'" alt="软件过程管理"></p><hr><h3>5. 思考与讨论</h3><p>以下说法是否正确？为什么？</p><ul><li>软件过程管理是软件项目管理应该要实现目标。</li><li>“在公司导入敏捷过程是我们今年过程改进的主要目标。”</li><li>XP与CMM/CMMI是对立的两种软件开发方法。</li><li>CMM/CMMI不适合当今互联网环境的项目管理需求。</li><li>PDCA和IDEAL不适合在敏捷环境中使用。</li><li>不同的软件开发过程应该使用不同的生命周期模型，反之亦如此。</li></ul><hr><h2>历史演变和经典工作</h2><h3>1. 三大历史阶段</h3><hr><ul><li>阶段一：<strong>软硬件一体化阶段</strong>（50年代~70年代） <ul><li>应用特征：软件依附于特定硬件，功能单一，复杂度有限，需求几乎不变（如大型机、军事系统）。</li><li>开发特征：硬件昂贵；开发者主要是硬件工程师/数学家；高级语言出现早期。</li></ul></li></ul><hr><ul><li>阶段二：<strong>软件成为独立的产品</strong>（70年代~90年代中期） <ul><li>应用特征： 摆脱硬件束缚（操作系统普及），功能强大，规模/复杂度剧增，个人电脑出现（普通用户），需求多变，兼容性要求，市场竞争压力。四大本质难题全面爆发（软件危机）。</li><li>开发特征：需要应对大型复杂项目。</li></ul></li></ul><hr><ul><li>阶段三：<strong>网络化和服务化</strong>（90年代中期迄今） <ul><li>应用特征： <ul><li>功能更复杂，规模更大。</li><li>用户数量剧增（带来可用性、可扩展性、安全性挑战）。</li><li>需求快速演化且高度不确定。</li><li>分发方式变革（Web, SaaS）。</li><li>当前现状 (进一步演化)： <ul><li>移动互联网主流，服务化/网络化深入。</li><li>用户需求极度多样化。</li><li>软件产品/服务地位核心化。</li><li>部署环境错综复杂。</li><li>用户期望苛刻： 多（功能丰富）、快（更新/响应）、好（稳定安全可靠）、省（低成本/免费）。</li></ul></li></ul></li></ul></li></ul><hr><h3>2. 典型软件过程和实践</h3><p><strong>瀑布模型 1</strong></p><p><img src="'+n+'" alt="waterFall"></p><p><strong>瀑布模型 2</strong></p><p><img src="'+g+'" alt="weaterfall3"></p><blockquote><p>软件过程改进 CMMI 不是“软件过程模型”</p></blockquote><p><img src="'+c+'" alt="maturity"></p><table><thead><tr><th>理由</th><th>说明</th></tr></thead><tbody><tr><td>不同层面</td><td>CMMI 是组织层面的过程改进框架，Agile 是项目层面的开发方法论</td></tr><tr><td>可互补</td><td>两者可以结合，敏捷可以帮助实现 CMMI 的过程目标</td></tr><tr><td>不冲突</td><td>CMMI 不限制你用什么开发模型，只关心你是否持续改进</td></tr><tr><td>错误对立</td><td>把二者当作对立选择，是对其本质的误解</td></tr></tbody></table><hr><blockquote><p>软件过程改进 PDCA 、 IDEAL</p></blockquote><p><img src="'+u+'" alt="pdca"></p><p><img src="'+d+'" alt="ideal"></p><hr><p><img src="'+h+'" alt="line2"></p><h2>团队动力学</h2><hr><h3>1. 软件开发的核心性质：知识工作</h3><p><strong>1.1 智力劳动特征</strong></p><ul><li>处理抽象概念，整合不可见组件形成可运行系统</li><li>要求工程师：<strong>全身心投入</strong> + <strong>主动追求卓越</strong></li><li>管理挑战：<strong>激励并维持知识工作者的积极性</strong>（无法强制管理，需自我管理）</li></ul><p><strong>1.2 自我管理的前提</strong></p><ul><li>积极性（内在驱动）</li><li>准确估算与计划能力</li><li>协商承诺的意识</li><li>有效跟踪计划执行</li><li>持续交付高质量产物</li></ul><hr><h3>2. 高效团队的核心：胶冻状团队（Jelled Team）</h3><ul><li><strong>定义</strong></li></ul><blockquote><p>成员深度互信，凭直觉互助；强归属感与共同使命感</p></blockquote><ul><li><p>关键特征：</p><ul><li>自主决策（目标、角色、过程、计划）</li><li>成员互相依赖，责任共担</li><li>领导者角色从“管理者”转向“赋能者”</li></ul></li></ul><hr><h3>3. 知识工作者的激励理论</h3><h4>3.1 马斯洛需求层次理论的应用</h4><p><img src="'+a+'" alt="motivator"></p><blockquote><p>第一层：生理需求</p><p>第二层：安全感</p><p>第三层：爱和归属感</p><p>第四层：获得尊敬</p><p>第五层：自我实现</p></blockquote><table><thead><tr><th><strong>需求层次</strong></th><th><strong>激励方式</strong></th><th>管理实践意义</th></tr></thead><tbody><tr><td>生理/安全（低层）</td><td>交易型领导（威逼、利诱）</td><td>短期有效，但抑制创造力</td></tr><tr><td>尊重/自我实现（高层）</td><td><strong>变革型领导（鼓励承诺）</strong></td><td>首选！通过成就感、责任感激发内在动力</td></tr></tbody></table><h4>3.2 三大激励方式对比</h4><table><thead><tr><th><strong>方式</strong></th><th>特点</th><th>团队表现</th></tr></thead><tbody><tr><td><strong>威逼</strong></td><td>强制服从</td><td>恐惧文化，低创新</td></tr><tr><td><strong>利诱</strong></td><td>物质奖励驱动</td><td>寻求捷径，质量不稳定</td></tr><tr><td><strong>承诺</strong></td><td><strong>基于尊重与自我实现</strong></td><td><strong>高投入、高创造力</strong></td></tr></tbody></table><h4>3.3 有效承诺的实践原则</h4><ul><li><strong>自愿性</strong>：非强制承诺</li><li><strong>公开性</strong>：团队共同承诺并互相监督</li><li><strong>可行性</strong>：基于详细计划支持承诺</li><li><strong>反馈机制</strong>：定期进度跟踪与里程碑庆祝</li></ul><h4>3.4 期望理论</h4><blockquote><p>人们在下列情况下能够受到激励并且出大量成果 M = V * E</p><ol><li>相信他们的努力很可能会产生成功的结果(V)</li><li>他们也相信自己会因为成功得到相应的回报(E)</li></ol></blockquote><hr><h3>4. 团队模型：TSP</h3><p><img src="'+b+'" alt="tsp"></p><p><img src="'+k+'" alt="tsp-launch"></p><h4>4.1 自主团队</h4><ul><li>特点</li></ul><blockquote><p>自行定义项目的目标</p><p>自行决定团队组成形式以及成员的角色</p><p>自行决定项目的开发策略</p><p>自行定义项目的开发过程</p><p>自行制定项目的开发计划</p><p>自行度量、管理和控制项目工作</p></blockquote><ul><li>外部环境 —— 项目启动阶段：获得管理层的支持</li></ul><blockquote><p>项目小组应当体现出已经尽最大的可能在满足管理层的需求的工作态度。</p><p>项目小组应当在计划中体现定期需要向管理层报告的内容。</p><p>项目小组应当向管理层证明他们所制定的工作计划是合理的。</p><p>项目小组应当在计划中体现为了追求高质量而开展的工作。</p><p>项目小组应当在工作计划中允许必要的项目变更。</p><p>项目小组应当向管理层寻求必要的帮助。</p></blockquote><ul><li>外部环境 —— 项目进展过程：获得管理层的支持</li></ul><blockquote><p>项目小组应当严格遵循定义好的开发过程开展项目开发工作。</p><p>项目小组应当维护和更新项目成员的个人计划和团队计划。</p><p>项目小组应当对产品质量进行管理。</p><p>项目小组应当跟踪项目进展，并定期向管理层报告。</p><p>项目小组应当持续地向管理层展现优异的项目表现。</p></blockquote><h4>4.2 TSP核心角色</h4><ul><li>项目组长TL</li></ul><blockquote><p>建设和维持高效率的团队</p><p>激励团队成员积极工作</p><p>合理处理团队成员的问题</p><p>向管理层提供项目进度相关的完整信息</p><p>充当合格的会议组织者和协调者</p></blockquote><blockquote><p>激励团队成员努力工作</p><p>主持项目周例会</p><p>每周汇报项目状态</p><p>分配工作任务</p><p>维护项目资料</p><p>组织项目总结</p></blockquote><hr><ul><li>计划经理</li></ul><blockquote><p>团队计划和个人计划</p><p>每周准确的报告项目小组状态</p></blockquote><blockquote><p>带领项目小组开发项目计划</p><p>带领项目小组平衡计划</p><p>跟踪项目进度</p><p>参与项目总结</p></blockquote><hr><ul><li>开发经理</li></ul><blockquote><p>开发优秀的软件产品</p><p>充分利用团队成员的技能</p></blockquote><blockquote><p>带领团队制定开发策略</p><p>带领团队开展产品规模估算和所需时间资源的估算</p><p>带领团队开发需求规格说明</p><p>带领团队开发高层设计</p><p>带领团队开发设计规格说明</p><p>带领团队实现软件产品</p><p>带领团队开展集成测试和系统测试</p><p>带领团队开发用户支持文档</p><p>参与项目总结</p></blockquote><hr><ul><li>质量经理</li></ul><blockquote><p>质量计划</p><p>评审工作、评审报告</p></blockquote><blockquote><p>带领团队开发和跟踪质量计划</p><p>向项目组长警示质量问题</p><p>软件产品提交配置管理之前，对其进行评审，以消除质量问题</p><p>项目小组评审的组织者和协调者</p><p>参与项目总结</p></blockquote><hr><ul><li>过程经理</li></ul><blockquote><p>团队成员准确的记录、报告和跟踪过程数据</p><p>团队会议都有相应会议记录</p></blockquote><blockquote><p>带领团队定义和记录开发过程并且支持过程改进</p><p>建立和维护团队的开发标准</p><p>记录和维护项目的会议记录</p><p>参与项目总结</p></blockquote><hr><ul><li>支持经理</li></ul><blockquote><p>合适的工具和环境</p><p>对于基线产品，不存在非授权的变更</p><p>风险和问题得到跟踪</p><p>开发过程中满足复用目标</p></blockquote><blockquote><p>带领团队识别开发过程中所需要的各类工具和设施</p><p>主持配置管理委员会，管理配置管理系统</p><p>维护软件项目的词汇表</p><p>维护项目风险和问题跟踪系统</p><p>支持软件开发过程中复用策略的应用</p><p>参与项目总结</p></blockquote><hr><h3>5. TSP &amp; Scrum</h3><p>5.1 <strong>共性</strong>：</p><blockquote><p><strong>跨职能团队</strong>：成员技能互补，集体担责</p><p><strong>自主决策</strong>：自组织制定计划/过程（非上级指令）</p><p><strong>透明性</strong>：计划/进度/问题可视化（TSP数据跟踪 vs. Scrum看板）</p><p><strong>心理安全</strong>：尊重个体，鼓励协作</p></blockquote><p>5.2 <strong>对高效团队的帮助</strong>：</p><blockquote><p><strong>减少层级摩擦</strong>：扁平结构加速决策</p><p><strong>增强归属感</strong>：共同承诺提升投入度</p><p><strong>快速响应变化</strong>：自组织机制适应不确定性</p></blockquote><hr><table><thead><tr><th style="text-align:center;"><strong>维度</strong></th><th style="text-align:center;">TSP</th><th style="text-align:center;">Scrum</th><th style="text-align:center;"><strong>本质差异</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>结构设计</strong></td><td style="text-align:center;"><strong>角色精细化分工</strong></td><td style="text-align:center;"><strong>角色极简</strong>（PO/SM/Dev Team）</td><td style="text-align:center;">TSP强管控 vs Scrum轻规则</td></tr><tr><td style="text-align:center;"><strong>过程管理</strong></td><td style="text-align:center;"><strong>计划驱动</strong>：详细估算、严格跟踪</td><td style="text-align:center;"><strong>经验驱动</strong>：拥抱变化、迭代适应</td><td style="text-align:center;">预测性 vs 适应性</td></tr><tr><td style="text-align:center;"><strong>承诺机制</strong></td><td style="text-align:center;"><strong>团队公开承诺</strong></td><td style="text-align:center;"><strong>Sprint目标共识</strong>（非强制承诺）</td><td style="text-align:center;">契约式 vs 协作式</td></tr><tr><td style="text-align:center;"><strong>质量保障</strong></td><td style="text-align:center;"><strong>质量经理</strong>独立监督（评审、审计）</td><td style="text-align:center;"><strong>团队内嵌</strong>（Done标准集体定义）</td><td style="text-align:center;">专职管控 vs 全员负责</td></tr><tr><td style="text-align:center;"><strong>适用场景</strong></td><td style="text-align:center;">航天、金融等高可靠性系统开发</td><td style="text-align:center;">互联网、创新产品（需求模糊快变）</td><td style="text-align:center;">确定性需求 vs 不确定性需求</td></tr></tbody></table><h2>估算</h2><h3>1. 概述</h3><blockquote><p><strong>目的</strong>： 是给各类计划提供决策依据</p><p><strong>对象</strong>： 规模、时间、日程</p></blockquote><h3>2. 方法</h3><ul><li>PROBE估算方法</li></ul><img src="'+q+'" alt="probe" style="zoom:50%;"><blockquote><p>尽可能划分详细一些</p><p>目标是建立对结果的信心</p><p>尽量依赖数据</p><p>估算要的是过程，而非结果；估算的过程是相关干系人达成一致共识的过程</p></blockquote><blockquote><p>度量体现着决策者对试图要实现的目标的关切程度</p></blockquote><h2>计划和跟踪</h2><h3>1. 工作分解结构 WBS</h3><p><img src="'+m+'" alt="wbs"></p><h3>2. 开发策略与计划</h3><blockquote><p>开发策略是在产品组件需求基础之上，明确每个产品组件的获得方式与顺序，从而在项目团队内部建立起大家都理解的产品开发策略。</p></blockquote><blockquote><p>注意事项</p><ol><li>WBS的使用</li><li>产品组件开发顺序的考虑</li><li>产品组件获得方式的考虑</li></ol></blockquote><p><img src="'+_+'" alt="genpic"></p><h3>3. 日程计划原理和方法</h3><blockquote><p>估算规模</p><p>估算资源</p><p>规划日程</p></blockquote><h3>4. 项目跟踪</h3><blockquote><p>意义： 目的在于了解项目进度，以便在项目实际进展与计划产生严重偏离时，可采取适当的纠正措施</p><p>项目跟踪需要管理针对偏差而采取的纠偏措施。</p></blockquote><h4>4.1 挣值管理</h4><blockquote><p>项目的挣值管理方法(Earned Value Management，简称EVM)是用来客观度量项目进度的一种项目管理方法。</p><p>EVM采用与<strong>进度计划、成本预算和实际成本</strong>相联系的三个独立的变量，进行项目绩效测量。</p></blockquote><blockquote><p>简单、中级、高级</p></blockquote><p><img src="'+S+'" alt="evm"></p><blockquote><p>成本差异 CV = EV - AC</p><p>成本差异指数 CPI = $\\frac{EV}{AC}$</p><p>日程偏差 SV = EV – PV</p><p>日程偏差指数 SPI = $\\frac{EV}{PV}$</p><p>预计完成成本 EAC = $AC + \\frac{BAC - EV}{CPI} = \\frac{BAC}{CPI}$</p></blockquote><p><strong>EVM 变形</strong></p><p><img src="'+y+'" alt="evm_2"></p><blockquote><p>EVM的局限性：</p><ol><li>一般不能应用软件项目的质量管理</li><li>需要定量化的管理机制，这就使其在一些探索型项目以及<strong>部分敏捷开发方法</strong>中的应用受到限制</li><li>完全依赖项目的<strong>准确估算</strong>（价值体系），然而在项目早期，很难对项目进行非常准确的估算。</li></ol></blockquote><h4>4.2 里程碑评审</h4><blockquote><p>软件项目的里程碑往往是指某个时间点，用以标记某项工作的完成或者阶段的结束。</p></blockquote><blockquote><p>审查的内容包括：</p><ol><li>项目相关的承诺，如日期、规格、质量等等；</li><li>项目各项计划的执行状况；</li><li>项目当前的状态讨论；</li><li>项目面临的风险讨论等</li></ol></blockquote><h4>4.3 其他</h4><blockquote><p>日程计划跟踪</p><p>承诺计划跟踪</p><p>风险计划跟踪</p><p>数据收集计划跟踪</p><p>沟通计划跟踪</p></blockquote><hr><p><img src="'+T+'" alt="line3"></p><h2>质量管理</h2><hr><h3>1. 质量概念</h3><blockquote><p>软件质量： “与软件产品满足规定的和隐含的需求能力有关的特征或者特性的全体”</p></blockquote><blockquote><p>软件质量为内外两部分的特性：</p><ol><li>外部质量特性面向软件产品的最终用户</li><li>内部质量特性则不直接面向最终用户</li></ol></blockquote><blockquote><p>从用户的角度考察软件质量，<strong>用户满意度</strong>是最为重要的判断标准</p></blockquote><h4>1.1 面向用户的质量观</h4><blockquote><p>用户是谁？</p><p>用户需求的优先级？</p><p>这种用户的优先级对软件产品的开发过程产生什么样的影响？</p><p>怎样来度量这种质量观下的质量水平？</p></blockquote><h4>1.2 典型的用户质量期望</h4><blockquote><p>必须能够工作</p><p>有较快的执行速度</p><p>在安全性、保密性、可用性、可靠性、兼容性、可维护性、可移植性等方面表现优异</p></blockquote><hr><h3>2. 质量管理策略</h3><blockquote><ol><li>用缺陷管理来替代全面质量管理</li><li>高质量产品也就意味着要求组成软件产品的各个组件基本无缺陷；</li></ol></blockquote><h4>2.1 消除缺陷</h4><ul><li>测试 <ul><li>发现待测程序的一个异常行为</li><li>理解程序的工作方式</li><li>调试程序，找出出错的位置，确定出错原因</li><li>确定修改方案，修改缺陷</li><li>回归测试，以确认修改有效；</li></ul></li><li>评审发现缺陷 <ul><li>遵循评审者的逻辑来理解程序流程</li><li>发现缺陷的同时，也知道了缺陷的位置和原因</li><li>修正缺陷</li></ul></li></ul><h4>2.2 质量指标</h4><ul><li><strong>Yield（缺陷消除效率）</strong>：</li></ul><p><img src="'+f+'" alt="yield"></p><hr><ul><li><strong>A/FR（质检成本/失效成本比）</strong>：</li></ul><blockquote><p>A/FR的值越大，往往意味着越高的质量</p><p>过高的A/FR往往意味着做了过多的评审，反而会导致开发效率的下降</p><p>PSP中A/FR的期望值就是2.0</p></blockquote><p><img src="'+x+'" alt="afr"></p><hr><ul><li><strong>PQI（过程质量指数）</strong>： <ul><li>5维度乘积</li></ul></li></ul><blockquote><p>设计质量：设计的时间应该大于编码的时间</p><p>设计评审质量：设计评审的时间应该大于设计时间的50%</p><p>代码评审质量：代码评审时间应该大于编码时间的50%</p><p>代码质量：代码的编译缺陷密度应当小于10个/千行</p><p>程序质量：代码单元测试缺陷密度应当小于5个/千行</p></blockquote><p><img src="'+M+'" alt="PQI"></p><hr><ul><li><strong>Review Rate（评审速率）</strong>： <ul><li>用以指导软件工程师开展有效评审的指标。</li><li>代码评审速度小于200 LOC/小时，文档评审速度小于4 Page/小时</li></ul></li></ul><hr><ul><li><strong>DRL（缺陷消除效率比）</strong>： <ul><li>对比不同阶段每小时发现缺陷数。</li><li>以某个测试阶段（一般为单元测试）每小时发现的缺陷数为基础，其他阶段每小时发现缺陷数与该测试阶段每小时发现的缺陷的比值就是DRL</li></ul></li></ul><table><thead><tr><th>阶段</th><th>缺陷个数/小时</th><th>DRL（UT）</th></tr></thead><tbody><tr><td>设计评审</td><td>3.6</td><td>1.03</td></tr><tr><td>编码评审</td><td>8</td><td>2.29</td></tr><tr><td>单元测试</td><td>3.5</td><td>1</td></tr></tbody></table><ul><li><strong>其他因素</strong><ul><li>打印后评审往往效果更好</li><li>评审时机选择 —— 编译（UT）之前 VS. 之后</li><li>个人评审和小组评审</li></ul></li></ul><h4>📌2.3 质量路径——为追求高质量 Quality Journey</h4><blockquote><p>Step 1：各种测试</p><p>Step 2：进入测试之前的产物质量提升</p><p>Step 3：评审过程度量和稳定</p><p>Step 4：质量意识和主人翁态度</p><p>Step 5：个体review的度量和稳定</p><p>Step 6：诉诸设计</p><p>Step 7：缺陷预防</p><p>Step 8：用户质量观——其他质量属性</p></blockquote><h3>3. 设计</h3><h4>3.1 设计与质量关系</h4><blockquote><p>低劣的设计是导致在软件开发中返工、不易维护以及用户不满的主要原因。</p><p>充分设计可以显著减少最终程序的规模，提升质量。</p><p>设计本身也是一种排错的过程</p></blockquote><hr><h4>3.2 典型设计过程</h4><p><img src="'+P+'" alt="design"></p><h4>3.3 设计内容</h4><blockquote><p>设计目标程序在整个应用系统中的位置</p><p>设计目标程序的使用方式</p><p>设计目标程序与其他组件以及模块之间的关系</p><p>设计目标程序外部可见的变量和方法</p><p>设计目标程序内部运作机制</p><p>设计目标程序内部静态逻辑</p></blockquote><table><thead><tr><th></th><th>动态信息</th><th>静态信息</th></tr></thead><tbody><tr><td>外部信息</td><td>交互信息（服务、消息等）</td><td>功能（继承、类结构等）</td></tr><tr><td>内部信息</td><td>行为信息（状态机）</td><td>结构信息（属性、业务逻辑等）</td></tr></tbody></table><hr><h4>3.4 设计模板</h4><table><thead><tr><th></th><th>动态信息</th><th>静态信息</th></tr></thead><tbody><tr><td>外部信息</td><td>OST/FST</td><td>FST</td></tr><tr><td>内部信息</td><td>SST</td><td>LST</td></tr></tbody></table><ul><li>操作规格模板（Operational Specification Template， 简称OST）</li></ul><blockquote><p>OST描述的是<strong>系统与外界</strong>的交互，是描述“用户”与待设计系统的正常情况和异常情况下的交互</p><p>用来定义测试场景和测试用例，也可以作为和系统用户讨论需求的基础</p></blockquote><ul><li>功能规格模板（Functional Specification Template， 简称FST）</li></ul><blockquote><p>FST描述的是<strong>系统对外的接口</strong></p><p>在FST中提供的典型信息包括类和继承关系，外部可见的属性和外部可见的方法</p><p>在使用FST模板的时候，<strong>消除二义性</strong>非常重要</p></blockquote><ul><li>状态规格模板（State Specification Template，简称SST）</li></ul><blockquote><p>SST可以精确定义程序的<strong>所有的状态</strong>、<strong>状态之间的转换</strong>以及伴随着每次状态转换的动作。</p></blockquote><ul><li>逻辑规格模板（Logical Specification Template，简称LST）</li></ul><blockquote><p>LST可以精确描述系统的<strong>内部静态逻辑</strong></p></blockquote><blockquote><p>需要描述如下的信息：关键方法的静态逻辑、方法的调用、外部引用、关键数据的类型和定义；</p></blockquote>',210)])))}};export{L as category,I as date,w as default,R as summary,F as updated};
