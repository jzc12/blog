const b=`---
date: 2025-07-01
updated: 2025-07-30
category: 考研复习
summary: 操作系统 
---

## 5.1 I/O管理概述

### 5.1.1 I/O设备

![](./../../public/assets/os/fb268548c7454e99831df995b09de3b8.webp)

注 ：稍微注意一下块设备是可以寻址的 ，但是字符设备是不可寻址的。

![](./../../public/assets/os/19dc5c196e3e418ab8268fb16d7d997f.webp)

+   I/O接口 （又称为设备控制器 ） 
    
    ![](./../../public/assets/os/72bff6e2ad1349869fe25538bc17fe34.webp) ![](./../../public/assets/os/c9eb158470dc4e3f937f5411bbd0c3c2.webp) ![](./../../public/assets/os/9bf6c5d206a848348f7d2df918b5711d.webp) ![](./../../public/assets/os/54a6222a872d4947b060760b85243250.webp)

### 5.1.2 I/O控制方式

![](./../../public/assets/os/31135a27a2c346aca084d60a86cca0c7.webp)

+   程序直接控制方式  
    
    ![](./../../public/assets/os/b3dee9742ef84c3fb3a30868daa0f715.webp) ![](./../../public/assets/os/263a935a50204f858737464759d00b69.webp)
    
+   中断驱动方式  
    
    ![](./../../public/assets/os/c024be2f3bbd49588880ebf5542a2b86.webp)
    
+   DMA方式  
    
    ![](./../../public/assets/os/22ec4bbfb51c4cf2972a55e11506867b.webp)
    
    ![DMA](./../../public/assets/os/DMA.png)
    
    ![DMA](./../../public/assets/os/DMA.png)

### 5.1.3 I/O软件层次结构

![](./../../public/assets/os/6755c70046ef4cc3b3410f6f5c730a0e.webp)

+   用户层软件 （产生I/O请求 ；格式化I/O ；SPOOLing ）  
    
    ![](./../../public/assets/os/4d96a3be1f9b4599b296c8c3ca07cbef.webp)
+   设备独立性软件 （映射 ；保护 ；分块 ；缓冲 ；分配 ）  
    
    ![](./../../public/assets/os/f8f60ba7d29442688988dd5493e64038.webp)
+   设备驱动程序 （设置设备寄存器 ；检查状态 ）  
    
    ![](./../../public/assets/os/011fc5b4380942c799f50dd24c9686a8.webp)
+   中断处理程序  
    
    ![](./../../public/assets/os/fc46524a392b411c81b5706c1a4f57bb.webp)

### 5.1.4 应用程序I/O接口

![](./../../public/assets/os/6951769722d443cb86f8d6ef641db957.webp)

![](./../../public/assets/os/588ce956d6274640a7f866cc8ec1a601.webp) ![](./../../public/assets/os/a6a3c17c581f462f85195a7462b68b10.webp)

### 5.1.5 本节小结

#### I/O管理要完成哪些功能 ？

> I/O管理需要完成以下4部分内容 ：
>
> 1.  状态跟踪。要能实时掌握外部设备的状态。
> 2.  设备存取。要实现对设备的存取操作。
> 3.  设备分配。在多用户环境下 ，负责设备的分配与回收。
> 4.  设备控制。包括设备的驱动、完成和故障的中断处理。

## 5.2 设备独立性软件

![](./../../public/assets/os/61bda631acda4b7b80db5073b37b1431.webp)

注 ：设备独立性是指用户编程时使用的设备与实际使用的设备无关。

### 5.2.1  设备独立性软件

![](./../../public/assets/os/7abaf5030af4487980331c36d695e5ea.webp) ![](./../../public/assets/os/8cddb44f598b40d38c531ac40e8f974b.webp)

### 5.2.2  高速缓存与缓冲区

![](./../../public/assets/os/25c709abb1cf4653a1fe09a03802b0bb.webp) ![](./../../public/assets/os/3647b19e69014f5398464e5a1b4f91d3.webp)

+   单缓冲


![](./../../public/assets/os/7fae3d40332147fd92a1413d6b24c341.webp) ![](./../../public/assets/os/374fb2a81a38402eaa89eeb08a9ea279.webp)

+   双缓冲  
    
    ![](./../../public/assets/os/d285f4a5572544f28ea667f7f52efd18.webp)  
    注 ：实现”同一时刻“下 ，数据的双向传输。
+   循环缓冲  
    
    ![](./../../public/assets/os/20a4cfdd9feb4b20aad2c3948bd2de8e.webp)

### 5.2.3  设备分配与回收

![](./../../public/assets/os/ccb2dda496b448d6b9a9e4cbf3039177.webp)  
注 ：设备分配常用的算法 ：1、先来先服务算法 2、最高优先级算法

![](./../../public/assets/os/47f1c21ee3514b86b040b559cdce0233.webp) ![](./../../public/assets/os/1c1c0e1a71534ba7bb26fe670fd8be7e.webp) ![](./../../public/assets/os/fb43234ad6b5478cbf540f702a37e47d.webp) ![](./../../public/assets/os/64f4658c87124ea19337605b42c1c38a.webp) ![](./../../public/assets/os/ad62c94a73a747e4aebecc5bbe7bcf42.webp) ![](./../../public/assets/os/3677a5edba2c4a65acced3ffca334005.webp)

![](./../../public/assets/os/443fe620430d4a21a310e82292eb2052.webp) ![](./../../public/assets/os/d25fbaa4e43a4aa9807a7fd2e6f176fd.webp) ![](./../../public/assets/os/cfe77d3726ac44efb98df0562cb0315b.webp) ![](./../../public/assets/os/75e52b2cc6c74884a860326dd9a2eb90.webp)

### 5.2.4  SPOOLing技术 （假脱机技术 ）

![](./../../public/assets/os/3f532b0dac754bd8a37aa79c91b04798.webp)

注 ：

+   其主要目的就是提高了独占设备 （技术前提 ）的利用率。
+   实现的基本条件是不仅要有大容量、高速度的外存作为输入和输出井 ，而且还要有SPOOLing软件。
+   是一种以空间换取时间的技术 ，能够提高作业执行的速度。
+   只需要外存蛤 ，不需要外围计算机。
+   建立在多道程序设计的基础上 ，在同一时间段内 ，输入进程、输出进程是可以和运行的作业进程并发执行的。

![](./../../public/assets/os/d4df1fdaf99b49cc939f6aad4fef9cbf.webp) ![](./../../public/assets/os/63f9193c708641f084e5c04e5ac9b001.webp)

### 5.2.5  设备驱动程序接口

### 5.2.6 本节小结

1 ）当处理机和外部设备的速度差距较大时 ，有什么办法可以解决问题 ？

> 可采用缓冲技术来缓解CPU与外设速度上的矛盾 ，即在某个地方 （一般为主存 ）设立一片缓冲区 ，外设与CPU的输入/输出都经过缓冲区 ，这样外设和CPU就都不用互相等待。

2 ）什么是设备的独立性 ？引入设备的独立性有什么好处 ？

> 设备独立性是指用户在编程序时使用的设备与实际设备无关。一个程序应独立于分配给它的某类设备的具体设备 ，即在用户程序中只指明IO使用的设备类型即可。
>
> 设备独立性有以下优点 ：①方便用户编程。②使程序运行不受具体机器环境的限制。③便于程序移植。

## 5.3  磁盘和固态硬盘

### 5.3.1 磁盘

![](./../../public/assets/os/3fdfb0a9412f410ea06997a362b5353b.webp)

![](./../../public/assets/os/a08d4474a31c480cb69c89a6d47592ac.webp)

### 5.3.2 磁盘的管理

![](./../../public/assets/os/d383abbd8d0148b397d5059cd9b9d6ab.webp)

![](./../../public/assets/os/682b9b6766c34805863014cfd83f0882.webp)
![](./../../public/assets/os/4106c0a92f954a91b0d8d3de7e9552c6.webp) 
![](./../../public/assets/os/9f14201325e14886bd5c147c4e9fd0ec.webp)

### 5.3.3 磁盘调度算法

![](./../../public/assets/os/4d28ecdbe0dc4fdc9fe1f6aa61d7cae8.webp)

![](./../../public/assets/os/5bfc6d15dbfd4418aa1f976eca7b8b67.webp)  
注 ：减少延迟时间的方法有 ：1、交替编号 2、错位命名

![](./../../public/assets/os/33dc1f63d25f4c269384a12682d63291.webp)
![](./../../public/assets/os/45bd8cb54200413285e80fa4ffc9fa21.webp)
![](./../../public/assets/os/016f6546699b47b6b38e890571460c75.webp) 
![](./../../public/assets/os/d165bd5488094659989addcdffd80cbe.webp)
![](./../../public/assets/os/cdf5378ee21344419a55bc3bf08fdfa3.webp) 
![](./../../public/assets/os/9d0f62ae8cf24dfba9c0b287c3376f73.webp)

### 5.3.4 固态硬盘

![](./../../public/assets/os/2a79ee8e4a554b7489a8fdde25db0e75.webp)

注 ：静态磨损均衡算法通常比动态磨损均衡算法的表现更优秀。

![](./../../public/assets/os/c1c25a15be844d1894bbdb6c841c1bf3.webp)

### 5.3.5 本节小结

1 ）在磁盘上进行一次读/写操作需要哪几部分时间 ？其中哪部分时间最长 ？

> 在磁盘上进行一次读/写操作花费的时间由寻道时间、延迟时间和传输时间决定。其中寻道时间是将磁头移动到指定磁道所需要的时间 ，延退时间是磁头定位到某一磁道的扇区 （块号 ）所需要的时间 ，传输时间是从磁盘读出或向磁盘写入数据所经历的时间。一般来说 ，寻道时间因为要移动磁头臂 ，所以占用时间最长。

2 ）存储一个文件时 ，当一个磁道存储不下时 ，剩下部分是存在同一个盘面的不同磁道好还是存在同一个柱面上的不同盘面好 ？

> 上一问经说到 ，寻道时间对于一次磁盘访问的影响是最大的 ，若存在同一个盘面的不同磁道 ，则磁头臂势必要移动 ，这样会大大增加文件的访问时间 ，而存在同一个柱面上的不同盘面就不需要移动磁道 ，所以一般情况下存在同一个柱面上的不同盘面更好。

## 5.4 本章疑难点

### 1、为了增加设备分配的灵活性、成功率 ，可以如何改进 ？

> 可以从以下两方面对基本的设备分配程序加以改进 ：
>
> 1.  增加设备的独立性 。进程使用逻辑设备名请求IO。这样 ，系统首先从SDT中找出第一个该类设备的DCT。若该设备忙 ，则又查找第二个该类设备的DCT。仅当所有该类设名都忙时 ，才将进程挂到该类设备的等待队列上 ：只要有一个该类设备可用 ，系统便进一步计算分配该设备的安全性。
> 2.  考虑多通路情况 。为防止IO系统的“瓶颈”现象 ，通常采用多通路的IO系统结构。此时对控制器和通道的分配同样要经过几次反复 ，即若设备 （控制器 ）所连接的第一个控制器 （通道 ）忙时 ，则应查看其所连接的第二个控制器 （通道 ），仅当所有控制器 （通道 ）都忙时 ，此次的控制器 （通道 ）分配才算失败 ，才将进程挂到控制器 （通道 ）的等待队列上。而只要有一个控制器 （通道 ）可用 ，系统便可将它分配给进程。
>
> 设备分配过程中 ，先后分别访问的数据结构为SDT→DCT→COCT→CHCT。要成功分配备一个设备 ，必须要 ：①设备可用 ：②控制器可用 ：③通道可用。所以 ，“设备分配 ，要过三关”。

### 2、什么是用户缓冲区、内核缓冲区 ？

> 5.1.4节中讨论过 ：“IO操作完成后 ，系统将数据从内核复制到用户空间”，这里说的是“内核”其实是指内核缓冲区 ，“用户空间”是指用户缓冲区。
>
> 用户缓冲区是指当用户进程读文件时 ，通常先申请一块内存数组 ，称为Buffer ，用来存放读取的数据。每次read调用 ，将读取的数据写入Buffer ，之后程序都从buffer中获取数据 ，当buffer使用完后 ，再进行下一次调用 ，填充buffer。可见 ，用户缓冲区的目的是减少系统调用次数 ，从而降低系统在用户态与核心态之间切换的开销。
>
> 内核也有自己的缓冲区。当用户进程从磁盘读取数据时 ，不直接读磁盘 ，而将内核缓冲区中的数据复制到用户缓冲区中。若内核缓冲区中没有数据 ，则内核请求从磁盘读取 ，然后将进程挂起 ，为其他进程服务 ，等到数据已读取到内核缓冲区中时 ，将内核缓冲区中的数据复制到用户进程的缓冲区 ，才通知进程 （当然 ，IO模型不同 ，处理的方式也不同 ）。当用户进程需要写数据时 ，数据可能不直接写入磁盘 ，而将数据写入内核缓冲区 ，时机适当时 （如内核缓冲区的数据积累到一定量后 ），内核才将内核缓冲区的数据写入磁盘。可见 ，内核缓冲区是为了在操作系统级别提高磁盘I/O效率 ，优化磁盘写操作。`;export{b as default};
